package com.merilytics.dao;

import java.util.List;
import java.util.Map;

import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Configuration;
import org.springframework.orm.hibernate5.HibernateTemplate;
import org.springframework.transaction.annotation.Transactional;

import com.merilytics.bo.UserDefinedFieldsBO;

@Configuration
public class UserDefinedFieldsDAO {
	@Autowired(required = true)
	@Qualifier("authenticationTemplete")
	private HibernateTemplate authenticationTemplete;

	@Autowired
	private DatabaseDAO dBDAO;

	
	@SuppressWarnings("unchecked")
	public List<UserDefinedFieldsBO> displayUserDefinedFields(boolean status) {

		DetachedCriteria dc = DetachedCriteria.forClass(UserDefinedFieldsBO.class);
		dc.add(Restrictions.eq("status", status));
		List<UserDefinedFieldsBO> listOfUserDefinedFields = (List<UserDefinedFieldsBO>) authenticationTemplete
				.findByCriteria(dc);
		return listOfUserDefinedFields;
	}

	@Transactional
	public boolean updateUserDefinedFields(List<Map<String, Object>> listOfDetails) {
		boolean isUpdated = false;
		try {
			for (Map<String, Object> mapOfDetails : listOfDetails) {
				if (mapOfDetails.get("pkID") != null) {
					UserDefinedFieldsBO uDFBO = authenticationTemplete.load(UserDefinedFieldsBO.class,
							(Integer) mapOfDetails.get("pkID"));
					uDFBO.setColumnName(mapOfDetails.get("columnName").toString());
					uDFBO.setStatus(true);
				} else {

					List<UserDefinedFieldsBO> listOfUserDefinedFields = displayUserDefinedFields(false);

					for (UserDefinedFieldsBO bo : listOfUserDefinedFields) {

						UserDefinedFieldsBO uDFBO = authenticationTemplete.load(UserDefinedFieldsBO.class,
								(Integer) mapOfDetails.get("pkID"));
						uDFBO.setColumnName(mapOfDetails.get("columnName").toString());
						uDFBO.setStatus(true);
						break;
					}
				}

			}
			isUpdated = true;
		} catch (Exception err) {
			isUpdated = false;
			err.printStackTrace();
		}
		return isUpdated;
	}

	@Transactional
	public boolean deleteUserDefinedFields(UserDefinedFieldsBO bo) {
		boolean isUpdated = false;
		try {
				UserDefinedFieldsBO uDFBO = authenticationTemplete.load(UserDefinedFieldsBO.class, bo.getPkID());
				uDFBO.setColumnName(null);
				uDFBO.setStatus(false);
				// uDFBO.setStatus(true);
				
				String updateQuery = "update tbl_itemmaster set " + bo.getuDF()  + " = null";
				dBDAO.executeStoredProc(updateQuery);
				
			isUpdated = true;
		} catch (Exception err) {
			isUpdated = false;
			err.printStackTrace();
		}
		return isUpdated;
	}

}

(function() {
	'use strict';
  var ScreenDirectives = angular.module('Authentication.ScreenDirectives',[]), tokenName = window.name+"Token";
  ScreenDirectives.directive('loginScreen', function() {
	  return {
	        restrict : "E",
	        controller: ['httpPreConfig', '$httpParamSerializer', '$q', '$window', '$state', '$mdDialog','$rootScope', function(httpPreConfig, HPS, Q, window, state, mdDialog,$rootScope){
	        	var loginController = this, Email, AuthenticationToken;
	        	loginController.Authenticate = {};
	        	loginController.Stage = 'logInBlock';
	        	loginController.logoURL = 'https://merilytics.com/wp-content/uploads/2016/06/Merilytics.jpg';
	        	loginController.Auth = 'Application';
	        	loginController.loginForm = function() { loginController.Authenticate = {}; loginController.Stage = 'logInBlock'; }
	        	
	        	/* Region Start: logIn Block Form */ 
	        	loginController.invalidCredenticalsMessage = "Invalid Email ID or Password.";
	        	loginController.callLoginRequest = function (form){
	        		var promise = httpPreConfig({ method: 'POST', url: 'loginForm', data: HPS({ email: loginController.Authenticate.emailID, password: btoa(loginController.Authenticate.password) }), headers: { 'Content-Type': 'application/x-www-form-urlencoded' } }),
					deferObject = deferObject || Q.defer();
					promise.then(function (success) {
						AuthenticationToken = success.headers(["token"]);
						/*if (success.data.forcepasswordchange) { Email = success.data.userData.email; }
						else {*/
							//success.data.userData.AuthenticationToken = AuthenticationToken;
						if(window.localStorage.getItem(tokenName)){ window.localStorage.removeItem(tokenName); }
						window.localStorage.setItem(tokenName, AuthenticationToken);
						deferObject.resolve(success.data.userData);
						/*$rootScope.roleBasedRestriction = success.data.userData.role_id;*/
						window.localStorage.setItem("roleBasedRestriction", success.data.userData.role_id);
						state.go('landingScreen');
						/*}*/	
					}, function (reason) {
						loginController.invalidCredenticalsMessage = reason.data.statusText;
						form['inputPassword'].$setValidity('doesnotMatchCredenticals', false);
						deferObject.reject(reason);
					}); 
	        	}
	            loginController.resetValidation = function (form) { form['inputPassword'].$setValidity('doesnotMatchCredenticals', true); }
	        	/* Region End: logIn Block Form */ 
	        	
	        	/* Region Start: Forgot Password Form */ 
	        	loginController.forgotPassword = function() { loginController.ForgotPasswordFormValues = {}; loginController.Stage = 'forgotPasswordBlock'; }
	            loginController.resetunregisteredEmail = function (form) { form['inputForgotPasswordEmailID'].$setValidity('unregisteredEmail', true); }
	            loginController.resetOTP = function (form) { form['inputForgotPasswordOTP'].$setValidity('wrongOTP', true); }
	        	loginController.forgotPasswordFormSubmit = function(form) {
	        		if(loginController.ForgotPasswordFormValues.emailID && !loginController.ForgotPasswordFormValues.ShowOtp){
		        		var promise = httpPreConfig({ method: 'POST', url: 'forgotpasswordcontroller', data: loginController.ForgotPasswordFormValues.emailID , headers: { 'Content-Type': 'application/json' } }),
						deferObject = deferObject || Q.defer();
						promise.then(function (response) {
							if(response.status == 200){ AuthenticationToken = response.headers(["token"]); loginController.ForgotPasswordFormValues.ShowOtp = true; }
						}, function(reason){ loginController.unregisteredEmail = reason.data.statusText; form['inputForgotPasswordEmailID'].$setValidity('unregisteredEmail', false); });
	        		}
	        		else if(loginController.ForgotPasswordFormValues.emailID && loginController.ForgotPasswordFormValues.ShowOtp){
	        			console.log(btoa(loginController.ForgotPasswordFormValues.otp));
		        		var promise = httpPreConfig({ method: 'POST', url: 'OTPCheck', data: btoa(loginController.ForgotPasswordFormValues.otp) , headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } }),
						deferObject = deferObject || Q.defer();
						promise.then(function (response) {
							if(response.status == 200){  AuthenticationToken = response.headers(["token"]); loginController.ForgotPasswordFormValues = {}; loginController.Stage = 'forcePasswordBlock'; }
						}, function(reason){ loginController.wrongOTPMsg = reason.data.statusText; form['inputForgotPasswordOTP'].$setValidity('wrongOTP', false); });
	        		}	        		 
	        	}
	            loginController.resetPasswordDoesNotMatch = function (form) { form['inputForceConfirmpassword'].$setValidity('passwordDoesNotMatch', true); form['inputForceConfirmpassword'].$setValidity('existPassword', true); }
	        	/* Region End: Forgot Password Form */ 
	            
	        	loginController.forcePasswordFormSubmit = function (form){ 
	        		if(loginController.ForcePasswordFormValues.Confirmpassword != loginController.ForcePasswordFormValues.Newpassword) { form['inputForceConfirmpassword'].$setValidity('passwordDoesNotMatch', false); }
	        		else {
		        		var promise = httpPreConfig({ method: 'POST', url: 'forceChangePassword', data: btoa(loginController.ForcePasswordFormValues.Confirmpassword) , headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } }),
						deferObject = deferObject || Q.defer();
						promise.then(function (response) {
							if(response.status == 200){ mdDialog.show( mdDialog.alert().clickOutsideToClose(true).title('New password succesfully changed!').textContent("Please click 'Ok' to continue").ariaLabel('Alert Dialog').ok('Ok') ).then(function(response){ loginController.Authenticate = {}; loginController.Stage = 'logInBlock'; }, function(reason){ alert('reason'); }); }
						}, function(reason){ loginController.existPasswordMsg = reason.data.statusText; form['inputForceConfirmpassword'].$setValidity('existPassword', false); });	        			
	        		}
	        	}
	            
	        }],
	        compile: function(tElement, tAttrs, transclude) {
	            return {
	               pre: function preLink(scope, iElement, iAttrs, controller) { },
	               post: function postLink(scope, iElement, iAttrs, controller) { }
	            }
	         },
	        controllerAs: 'loginController',
	        link: function(scope, element, attrs, controllers) { },
	        templateUrl : 'Authentication/View/login.html'
	    };
	}); 

  ScreenDirectives.directive('changePasswordScreen', function() {
	  return {
	        restrict : "E",
	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog', 'notification',function(window, state, httpPreConfig, Q, mdDialog, notification){ 
	        	var changePasswordController = this;
	        	changePasswordController.resetPasswordDoesNotMatch = function (form) { form['inputForceConfirmpassword'].$setValidity('passwordDoesNotMatch', true); form['inputForceConfirmpassword'].$setValidity('existPassword', true); }
	        	changePasswordController.forcePasswordFormSubmit = function (form){ 
	        		if(changePasswordController.ForcePasswordFormValues.Confirmpassword != changePasswordController.ForcePasswordFormValues.Newpassword) { form['inputForceConfirmpassword'].$setValidity('passwordDoesNotMatch', false); }
	        		else {
						var AuthenticationToken = window.localStorage.getItem(tokenName);
		        		var promise = httpPreConfig({ method: 'POST', url: 'forceChangePassword', data: btoa(changePasswordController.ForcePasswordFormValues.Confirmpassword) , headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } }),
						deferObject = deferObject || Q.defer();
						promise.then(function (response) {
							if(response.status == 200){ mdDialog.show( mdDialog.alert().clickOutsideToClose(true).title('Password has been changed succesfully!')/*.textContent("Please click 'Ok' to continue")*/.ariaLabel('Alert Dialog').ok('Ok') ).then(function(response){ if(window.localStorage.getItem(tokenName)){ window.localStorage.removeItem(tokenName); } state.go('logIn'); }, function(reason){ alert('reason'); }); }
						}, function(reason){ changePasswordController.existPasswordMsg = reason.data.statusText; form['inputForceConfirmpassword'].$setValidity('existPassword', false); });	        			
	        		}
	        	}
	        }],
	        controllerAs: 'changePasswordController',
	        link: function(scope, element, attrs, controllers) { },
	        templateUrl : 'Authentication/View/changePassword.html'
	    };
	}); 
  
  ScreenDirectives.directive('landingScreen', [function () {
	    return {
	      restrict: 'E',
	      controller:['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification){
	    	  var landingScreenController = this;
	    	  landingScreenController.applicationsList = [];
	    	  landingScreenController.callLogoutRequest = function(ev){
	        		var confirm = mdDialog.confirm().title('Are you sure you want to logout?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () { window.localStorage.removeItem(tokenName); state.go('logIn'); }, function () { });
	        	}

	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
	        	var promise = httpPreConfig({ method: 'GET', url: 'getApps', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } }),
				deferObject = deferObject || Q.defer();
				promise.then(function (response) { landingScreenController.applicationsList = angular.fromJson(response.data); }, function (reason) { }); 
				landingScreenController.redirectToApplication = function(applicationData){ window.location.href = applicationData.url; }
	        	
				var promise = httpPreConfig({ method: 'GET', url: 'empDetailsWithToken', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
				promise.then(function (response) {   landingScreenController.getUserData = angular.fromJson(response.data); }, function(reason){ window.localStorage.removeItem(tokenName); state.go('logIn'); });

				
				/*{"statusText":"no details found"}*/
				
				
				
			landingScreenController.Screens=[   {"screen_name":"Item Master","url":"landingScreen.productMaster"}	
												,{"screen_name":"Size","url":"landingScreen.Size"}
												,{"screen_name":"No Size","url":"landingScreen.NoSize"}
												,{"screen_name":"Shopify Size","url":"landingScreen.ShopifySize"}
												,{"screen_name":"Fashion Pyramid","url":"landingScreen.FashionPyramid"}
												,{"screen_name":"Occasion","url":"landingScreen.Occasion"}
												,{"screen_name":"Category","url":"landingScreen.categoryMaster"}
												,{"screen_name":"Sub-Category","url":"landingScreen.SubCategory"}
												,{"screen_name":"NO Category","url":"landingScreen.NOCategory"}
												,{"screen_name":"NO Category Code","url":"landingScreen.NOCategoryCode"}
												,{"screen_name":"Fabric Type","url":"landingScreen.FabricType"}
												,{"screen_name":"Product Type","url":"landingScreen.ProductType"}
												,{"screen_name":"Fabrication","url":"landingScreen.Fabrication"}
												,{"screen_name":"Product Style","url":"landingScreen.ProductStyle"}
												,{"screen_name":"Color Family","url":"landingScreen.ColorFamily"}
												,{"screen_name":"Color Variant","url":"landingScreen.ColorVariant"}
												,{"screen_name":"Shade","url":"landingScreen.Shade"}
												,{"screen_name":"Pattern","url":"landingScreen.Pattern"}
												,{"screen_name":"Scale","url":"landingScreen.Scale"}
												,{"screen_name":"NO Season","url":"landingScreen.NOSeason"}
												,{"screen_name":"Season","url":"landingScreen.Season"}
												,{"screen_name":"Collection","url":"landingScreen.Collection"}
												,{"screen_name":"Collar","url":"landingScreen.Collar"}
												,{"screen_name":"Bottom Rise","url":"landingScreen.BottomRise"}]
				
				Bind();
				function Bind(){
					$scope.screen={};
					$scope.screen.selectedScreen='landingScreen.productMaster';
					state.go('landingScreen.productMaster');
				}
				
				landingScreenController.screenChange = function(Screen){
					
					state.go(Screen.selectedScreen);
				}
				
				
				
	      }],
	      controllerAs: 'landingScreenController',
	        link: function(scope, element, attrs, controllers) { },
	        templateUrl : 'Authentication/View/LandingScreen.html'
	      
	    }
	  }]);
  
  
  ScreenDirectives.directive('productMaster', function() {
	  return {
	        restrict : "E",
	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification','Export', '$location','$rootScope', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification,Export, location,$rootScope){
	        	var productMasterController = this;
	        	productMasterController.applicationsList = [];
	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
	        	$scope.roleBasedRestriction =  window.localStorage.getItem("roleBasedRestriction");
	        	/*productMasterController.accessGranted = function(){ return roleBasedRestriction.access(); }*/
	        	
	        	/*productMasterController.callLogoutRequest = function(ev){
	        		var confirm = mdDialog.confirm().title('Are you sure you want to logout?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () { window.localStorage.removeItem(tokenName); state.go('logIn'); }, function () { });
	        	}

	        	
        		var promise = httpPreConfig({ method: 'GET', url: 'getApps', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } }),
				deferObject = deferObject || Q.defer();
				promise.then(function (response) { productMasterController.applicationsList = angular.fromJson(response.data); }, function (reason) { }); 
				productMasterController.redirectToApplication = function(applicationData){ window.location.href = applicationData.url; }
	        	var promise = httpPreConfig({ method: 'GET', url: 'empDetailsWithToken', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
				promise.then(function (response) { productMasterController.getUserData = angular.fromJson(response.data); }, function(reason){ });
*/	           
				$scope.showTable=true;
				$scope.btnName="Save";
				$scope.childScope=$scope.$parent;
				$scope.selectedPage={};
				$scope.PaginationSearch={};
//				productMasterController.options ={"pageSelect":1}
//				productMasterController.query={limit:50,page:1}
//				
				$scope.listStyle = { 'max-height': (window.innerHeight - (200)) + 'px' };
				$scope.BodylistStyle = { height: (window.innerHeight - 250) + 'px' };
				
				
				window.addEventListener('resize', onResize);
				function onResize() {
					$scope.listStyle.height = (window.innerHeight - 210) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				window.addEventListener('resize', onBodyResize);
				function onBodyResize() {
					$scope.BodylistStyle.height = (window.innerHeight - 250) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				
				
				/* angular.element(document.querySelector('.meritus-body')).bind('scroll', function(){
				      console.log('scrolling is cool!');
				    })
				*/
			
				
				/*$(document).ready(function(){
				    $(".meritus-table-header").scroll(function(){
				        $(".meritus-table-body").scrollLeft($(".meritus-table-header").scrollLeft())
				    });
				});*/
				/*angular.element(".meritus-table-header").scroll(function(){
					angular.element(".meritus-table-body").scrollLeft(angular.element(".meritus-table-header").scrollLeft())
				})*/
				$(document).ready(function(){
				   $(".meritus-table-body").scroll(function(){
					   //alert($(".meritus-table-body").scrollLeft());
					 	   $(".meritus-table-header").scrollLeft($(".meritus-table-body").scrollLeft());
					 });
				});
				
				
				/*angular.element(".meritus-table-body").scroll(function(){
					alert("hello");
				});*/
				
				window.addEventListener("keydown", checkKeyPressed, false);
				 
				function checkKeyPressed(e) {
				    if (e.keyCode == "36") {
				    	
								   //alert($(".meritus-table-body").scrollLeft());
								 	   $(".meritus-table-header").scrollLeft($(".meritus-table-body").scrollLeft(0));
								
				    }
				}
				
				function redirectToLogin(reason){
					window.localStorage.clear(); 
					location.path('/login');
				}
				
				
				BindData()
				function BindData(){
					
					BindPaginationData()
					 
					
					ColorVariantDialogBindData();
					SizeBindData();
					FashionPyramidBindData();
					OccasionBindData();
					CategoryBindData();
					NoCategoryBindData();
					FabricTypeBindData();
					ProductTypeBindData();
					FabricationBindData();
					ProductStyleBindData();
					ColorFamilyBindData();
					PatternBindData();
					ScaleBindData();
					NoSessionBindData();
					SessionBindData();
					CollectionBindData();
					CollarBindData();
					BottomRiseBindData();
					YearBindData();
					MonthBindData();
				}
				
				function ItemMasterBind(){
					$scope.Pagination.search=angular.copy($scope.PaginationSearch.filter);
					
					var promise=httpPreConfig({ method: 'POST', url: 'getItemMasterPagination', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken },data:$scope.Pagination });
					promise.then(function (response) {  
						productMasterController.firstarray = response.data[1];
						$scope.ItemMasterDisplay1 = productMasterController.firstarray[0].columnName;
						$scope.ItemMasterDisplay1status = productMasterController.firstarray[0].status;
						$scope.ItemMasterDisplay2 = productMasterController.firstarray[1].columnName;
						$scope.ItemMasterDisplay2status = productMasterController.firstarray[1].status;
						$scope.ItemMasterDisplay3 = productMasterController.firstarray[2].columnName;
						$scope.ItemMasterDisplay3status = productMasterController.firstarray[2].status;
						$scope.ItemMasterDisplay4 = productMasterController.firstarray[3].columnName;
						$scope.ItemMasterDisplay4status = productMasterController.firstarray[3].status;
						$scope.ItemMasterDisplay5 = productMasterController.firstarray[4].columnName;
						$scope.ItemMasterDisplay5status = productMasterController.firstarray[4].status;
						$scope.ItemMasterDisplay6 = productMasterController.firstarray[5].columnName;
						$scope.ItemMasterDisplay6status = productMasterController.firstarray[5].status;
						$scope.ItemMasterDisplay7 = productMasterController.firstarray[6].columnName;
						$scope.ItemMasterDisplay7status = productMasterController.firstarray[6].status;
						$scope.ItemMasterDisplay8 = productMasterController.firstarray[7].columnName;
						$scope.ItemMasterDisplay8status = productMasterController.firstarray[7].status;
						$scope.ItemMasterDisplay9 = productMasterController.firstarray[8].columnName;
						$scope.ItemMasterDisplay9status = productMasterController.firstarray[8].status;
						$scope.ItemMasterDisplay10 = productMasterController.firstarray[9].columnName;
						$scope.ItemMasterDisplay10status = productMasterController.firstarray[9].status;
						productMasterController.Grid_Data ={"count":angular.fromJson(response.data[0].length),"data":angular.fromJson(response.data[0]) }
						
							productMasterController.vieweditarray = [];
							var i,length = productMasterController.firstarray.length;
							for(i=0;i<length;i++){
								if(productMasterController.firstarray[i].status == true){
									productMasterController.vieweditarray.push(productMasterController.firstarray[i]);
								}
							}
							
							if(productMasterController.vieweditarray[0].columnName != null){
								$scope.viewEdit1 = productMasterController.vieweditarray[0].columnName;
								$scope.viewEdit1status = productMasterController.vieweditarray[0].status;
							}
							else{
								$scope.viewEdit1 = null;
								$scope.viewEdit1status = false;
							}
							if(productMasterController.vieweditarray[1].columnName != null){
								$scope.viewEdit2 = productMasterController.vieweditarray[1].columnName;
								$scope.viewEdit2status = productMasterController.vieweditarray[1].status;
							}
							else{
								$scope.viewEdit2 = null;
								$scope.viewEdit2status = false;
							}
							if(productMasterController.vieweditarray[2].columnName != null){
								$scope.viewEdit3 = productMasterController.vieweditarray[2].columnName;
								$scope.viewEdit3status = productMasterController.vieweditarray[2].status;
							}
							else{
								$scope.viewEdit3 = null;
								$scope.viewEdit3status = false;
							}
							if(productMasterController.vieweditarray[3].columnName != null){
								$scope.viewEdit4 = productMasterController.vieweditarray[3].columnName;
								$scope.viewEdit4status = productMasterController.vieweditarray[3].status;
							}
							else{
								$scope.viewEdit4 = null;
								$scope.viewEdit4status = false;
							}
							if(productMasterController.vieweditarray[4].columnName != null){
								$scope.viewEdit5 = productMasterController.vieweditarray[4].columnName;
								$scope.viewEdit5status = productMasterController.vieweditarray[4].status;
							}
							else{
								$scope.viewEdit5 = null;
								$scope.viewEdit5status = false;
							}
							if(productMasterController.vieweditarray[5].columnName != null){
								$scope.viewEdit6 = productMasterController.vieweditarray[5].columnName;
								$scope.viewEdit6status = productMasterController.vieweditarray[5].status;
							}
							else{
								$scope.viewEdit6 = null;
								$scope.viewEdit6status = false;
							}
							if(productMasterController.vieweditarray[6].columnName != null){
								$scope.viewEdit7 = productMasterController.vieweditarray[6].columnName;
								$scope.viewEdit7status = productMasterController.vieweditarray[6].status;
							}
							else{
								$scope.viewEdit7 = null;
								$scope.viewEdit7status = false;
							}
							if(productMasterController.vieweditarray[7].columnName != null){
								$scope.viewEdit8 = productMasterController.vieweditarray[7].columnName;
								$scope.viewEdit8status = productMasterController.vieweditarray[7].status;
							}
							else{
								$scope.viewEdit8 = null;
								$scope.viewEdit8status = false;
							}
							if(productMasterController.vieweditarray[8].columnName != null){
								$scope.viewEdit9 = productMasterController.vieweditarray[8].columnName;
								$scope.viewEdit9status = productMasterController.vieweditarray[8].status;
							}
							else{
								$scope.viewEdit9 = null;
								$scope.viewEdit9status = false;
							}
							if(productMasterController.vieweditarray[9].columnName != null){
								$scope.viewEdit10 = productMasterController.vieweditarray[9].columnName;
								$scope.viewEdit10status = productMasterController.vieweditarray[9].status;
							}
							else{
								$scope.viewEdit10 = null;
								$scope.viewEdit10status = false;
							}
							
							
						
								
					}, function(reason){ redirectToLogin(reason); });
					
				}
				 
				
				
				
				function BindPaginationData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getPagination', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { 
						productMasterController.PaginationData ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data)}
						$scope.Pagination=angular.copy(productMasterController.PaginationData.data[0]);
						ItemMasterBind();
					}, function(reason){ redirectToLogin(reason); });
				}
				
				function SizeBindData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaticSizeDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { productMasterController.Size_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ redirectToLogin(reason); });
				}
				
				function NoSizeBindData(size){
					var promise=httpPreConfig({ method: 'POST', url: 'getStaticNoSizeDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken },data:size });
					promise.then(function (response) { productMasterController.NoSize_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ redirectToLogin(reason); });
				}
				
				function ShopifySizeBindData(size){
					var promise=httpPreConfig({ method: 'POST', url: 'getStaticShopifySizeDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken },data:size });
					promise.then(function (response) { productMasterController.ShopifySize_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }},
							function(reason){
						redirectToLogin(reason);
						});
				}
				
				function FashionPyramidBindData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaticFashionPyramidDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { productMasterController.FashionPyramid_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ redirectToLogin(reason); });
				}
				
				function OccasionBindData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaticOccasionDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { productMasterController.Occassion_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ redirectToLogin(reason); });
				}
				
				function CategoryBindData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaiticCategoryDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { productMasterController.Category_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ redirectToLogin(reason); });
				}
				
				function SubCategoryBindData(categoryid){
					var promise=httpPreConfig({ method: 'POST', url: 'getStaticSubCategoryDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken },data:categoryid });
					promise.then(function (response) {  productMasterController.SubCategory_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }  }, function(reason){ redirectToLogin(reason); });
				}
				
				function NoCategoryBindData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaticNocategoryDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { productMasterController.NoCategory_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ redirectToLogin(reason); });
				}
				
				function NoCategoryCodeBindData(nOCategory){
					var promise=httpPreConfig({ method: 'POST', url: 'getStaticNocategoryCodeDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken },data:nOCategory });
					promise.then(function (response) { productMasterController.NoCategoryCode_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ redirectToLogin(reason); });
				}
				
				function FabricTypeBindData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaticFabrictypeDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { productMasterController.FabricType_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ redirectToLogin(reason); });
				}
				
				function ProductTypeBindData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaticStaticProductTypeDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { productMasterController.Producttype_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ redirectToLogin(reason); });
				}
				
				function FabricationBindData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaticFabricationDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { productMasterController.Fabrication_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ redirectToLogin(reason); });
				}
				
				function ProductStyleBindData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaticProductStyleDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { productMasterController.ProductStyle_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ redirectToLogin(reason); });
				}
				
				
				function ColorFamilyBindData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaticColorfamilyDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { productMasterController.ColorFamily_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ redirectToLogin(reason); });
				}
				
				
				function ColorVariantBindData(colorFamily){
					var promise=httpPreConfig({ method: 'POST', url: 'getStaticColorvariantDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken },data:colorFamily });
					promise.then(function (response) { productMasterController.ColorVariant_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ redirectToLogin(reason); });
				}
				
				
				
				function ColorVariantDialogBindData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getColourVarient', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { productMasterController.ColorVariantDialog_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ redirectToLogin(reason); });
				}
				
				function ShadeBindData(colorVariant){
					var promise=httpPreConfig({ method: 'POST', url: 'getStaticShadeDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken },data:colorVariant });
					promise.then(function (response) { productMasterController.Shade_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ redirectToLogin(reason); });
				}
				
				
				function PatternBindData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaticPatternDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { productMasterController.Pattern_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ redirectToLogin(reason); });
				}
				
				function ScaleBindData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaticScaleDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { productMasterController.Scale_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ redirectToLogin(reason); });
				}
				
				function NoSessionBindData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaticNoseasonDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { productMasterController.NoSession_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ redirectToLogin(reason); });
				}
				
				function SessionBindData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaticSeasonDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { productMasterController.Session_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ redirectToLogin(reason); });
				}
				
				function CollectionBindData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaticCollectionDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { productMasterController.Collection_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ redirectToLogin(reason); });
				}
				
				function CollarBindData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaticCollarDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { productMasterController.Collar_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ redirectToLogin(reason); });
				}
				
				
				function BottomRiseBindData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaticBottomriseDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { productMasterController.BottomRise_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ redirectToLogin(reason); });
				}
				

				function YearBindData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaticYear', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { productMasterController.Year_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ redirectToLogin(reason); });
				}
				
				function MonthBindData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaticMonth', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { productMasterController.Month_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ redirectToLogin(reason); });
				}
				
				$scope.uploadPopUp = function(){
					$scope.Excelupload = {};
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'ExcelUploadBrowse.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	 $scope.closeDialog = function() { $mdDialog.hide();
		                	 $scope.Excelupload = {};
		                	 }
		                	 $scope.uploadFile = function (radiofinishedOrRaw) {
		                		 $scope.closeDialog();
		     					if($rootScope.MizzenMainFileData == undefined || $rootScope.MizzenMainFileData == null){
		     						notification.notify('please select File');
		     					}
		     					else{
		     						$rootScope.loadingPanel1 = true;
		     					
		     						var promise=httpPreConfig({
		     							method: 'POST',
		     							url: 'excellupload',
		     							headers: {  'Content-Type': undefined, 'token': AuthenticationToken },
		     							transformRequest: function (data) {
		     								var formData = new FormData();
		     								formData.append("finishedOrraw",data.finishedOrraw );
		     								formData.append("fileUploadCmd", data.fileUploadCmd);
		     								return formData;
		     							},
		     							data: {fileUploadCmd: $rootScope.MizzenMainFileData,finishedOrraw : radiofinishedOrRaw }
		     						});
		     						promise.then(function (response) {$rootScope.loadingPanel1 = false; if (response.status == 200) {
		     							mdDialog.show({
		     				                  clickOutsideToClose: true,
		     				                  scope:$scope,
		     				                  preserveScope: true,    
		     				    		      fullscreen: 'md' ,       
		     				                  templateUrl: 'ExcelUpload.html',
		     				                  controller: function DialogController($scope, $mdDialog) {
		     				                	 $scope.closeDialog = function() { $mdDialog.hide(); }
		     				                    $scope.TotalCount = response.data.TotalCount ;
		     				                    $scope.errorCount = response.data.errorCount ;
		     				                	$scope.ExcelDownloadAfterUpload = function(){
		     				                		Export.xlsExportMultipleJSON(angular.fromJson(response.data.errorData))
		     				                	}
		     				                	 
		     				                  }
		     				               });
		     						}
		     						else if(response.status == 400){
		     							$rootScope.loadingPanel1 = false;
		     						}}, function(response){
		     							$rootScope.loadingPanel1 = false;
		     							if(response.status == 417){
		     								notification.notify(response.data.status);
		     							}
		     							
		     						});
		     						
		     						
		     					
		     				}
		     			}
		                	
		                	 
		                  }
		               });
				}
				
				
				
				productMasterController.PaginationChange =function(mp){
					for(var i=1;i<=productMasterController.PaginationData.count;i++){
						if(i==mp.slno){
							$scope.Pagination=angular.copy(productMasterController.PaginationData.data[i-1]);
						}
					}
					ItemMasterBind();
				}
				
				
				productMasterController.SkuCode_Check = function(){
					
					if(!angular.isUndefined($scope.ProductMaster.style) && !angular.isUndefined($scope.ProductMaster.pkSizeID)){
						var promise=httpPreConfig({ method: 'POST', url: 'uniqueSKUID', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken },data:{"style":$scope.ProductMaster.style,"pkSizeID":$scope.ProductMaster.pkSizeID,"skuCode":$scope.ProductMaster.skuCode} });
						promise.then(function (response) {
							if(response.data){ 
								$scope.ProductMaster.style=undefined;
								$scope.ProductMaster.pkSizeID={};
								notification.notify("Style and Size Combination already exists.");
							}
							else{}
						},
						function(reason){
							alert("hello");
							redirectToLogin(reason);
							});
					}
				}
				productMasterController.CategoryChange= function(category){
					$scope.ProductMaster.pkSubCategoryID={};
					SubCategoryBindData(category);
				}
				
				productMasterController.ColorFamilyChange = function(colorFamily){
					
//					alert($scope.ProductMaster.pkColorFamilyID);
					
					$scope.ProductMaster.pkColorVariantID={};
					ColorVariantBindData(colorFamily);
				}
				
				productMasterController.ColorVariantChange = function(colorVariant){
					$scope.ProductMaster.pkShadeID={};
					ShadeBindData(colorVariant);
				}
				
				productMasterController.SizeChange =function(size){
					$scope.ProductMaster.pkNoSizeID={};
					$scope.ProductMaster.pkshopifySizeID={};
					NoSizeBindData(size);
					ShopifySizeBindData(size);
					productMasterController.SkuCode_Check();
				}
				
				productMasterController.NoCategoryChange=function(nOCategory){
					$scope.ProductMaster.pkNOCategoryCode={};
					NoCategoryCodeBindData(nOCategory)
				}
				
				productMasterController.ViewData = function(ev,pm){
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'viewDetails.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	  $scope.ProductMaster=angular.copy(pm);
		                     $scope.closeDialog = function() { $mdDialog.hide(); }
		                    
		                     $scope.editDialog =function(ev,pm){ $mdDialog.hide(); productMasterController.EditData(ev,pm) }
		                  }
		               });
				}
				
				
				productMasterController.EditData= function(ev,pm){
					$scope.showTable=false;
					$scope.btnName="Update";
					$scope.ProductMaster1 = {};
					$scope.ProductMaster=angular.copy(pm);
					$scope.ProductMaster1.finishOrRaw  = pm.finishOrRaw;
					if($scope.ProductMaster.pkSizeID != null){
						NoSizeBindData($scope.ProductMaster.pkSizeID);
					}
					if($scope.ProductMaster.pkSizeID != null){
						ShopifySizeBindData($scope.ProductMaster.pkSizeID);
					}
					if($scope.ProductMaster.pkCategoryID != null){
						SubCategoryBindData($scope.ProductMaster.pkCategoryID);
					}
					if($scope.ProductMaster.pknOCategoryID != null){
						NoCategoryCodeBindData($scope.ProductMaster.pknOCategoryID);
					}
					if($scope.ProductMaster.pkColorFamilyID != null){
						ColorVariantBindData($scope.ProductMaster.pkColorFamilyID);
					}
					if($scope.ProductMaster.pkColorVariantID != null){
						ShadeBindData($scope.ProductMaster.pkColorVariantID);
					}
					
					
					$scope.ProductMasterForm.$setPristine();
					$scope.ProductMasterForm.$setUntouched();
				}
				
				productMasterController.ExcelDownload = function(){
					
					var json={};
					var promise=httpPreConfig({ method: 'GET', url: 'getItemMasterExcellDownload', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { Export.xlsExportMultipleJSON(angular.fromJson(response.data)) }, function(reason){ redirectToLogin(reason); });
					
				}
				
				
				productMasterController.clearAll = function($event,form){
					$scope.ProductMaster={};
					productMasterController.newItem(form);
					
					form.$setUntouched();
					
				}
				productMasterController.finishOrRaw = true;
				
				productMasterController.finishOrRawChange = function(ev,val, FormData,form){
					
					var confirm = mdDialog.confirm().title('The existing data might be lost on changing the options from finished goods to raw goods. Do you want to continue?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () {
	        			$scope.ProductMaster={};
	        			if(!val){
							FormData.pkSizeID = null;
							FormData.style = null;
							FormData.baseUPC = null;
							FormData.uPCCheckDigit = null;
							FormData.nRFSize = null;
							FormData.nRFColor = null;
							FormData.directAllocation = null;
							FormData.pkNoSizeID = null;
							FormData.pkshopifySizeID = null;
							FormData.pkFashionPyramidID = null;
							FormData.pkOccasionID = null;
							FormData.pkColorFamilyID = null;
							FormData.pkColorVariantID = null;
							FormData.pkShadeID = null;
							FormData.pkScaleID = null;
							FormData.fit = null;
							
						}
	        			else{
	        				
	        			}
	        			
						form.$setUntouched();
					
	        			
	        		}, function () { $scope.ProductMaster1.finishOrRaw = !$scope.ProductMaster1.finishOrRaw; });					
				}
				productMasterController.newItem = function(form){
					var checkNew=productMasterController.Grid_Data.data[0].ispossibletoNew;
					if(checkNew){
						$scope.ProductMaster={};
						$scope.ProductMaster1 = {};
						$scope.ProductMaster1.finishOrRaw = true;
						$scope.showTable=false;
						$scope.btnName="Save";
						form.$setPristine();
						form.$setUntouched();

					}
					else{
						notification.notify("Base UPC out of range.");
					}
				}
				
				productMasterController.saveData = function(ev,form){
					
					if($scope.btnName == "Save"){
						
						if(angular.equals($scope.LastCopied,$scope.ProductMaster)){
							notification.notify("Copied item Not Modified");
						}
						else{
							
							var promise=httpPreConfig({ method: 'POST', url: 'insertItemMasterDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data : {newFields : $scope.ProductMaster , finishedOrRaw : $scope.ProductMaster1} });
							promise.then(function (response) {  
								$scope.btnName="Update";
								notification.notify("The entry has been successfully added.");
								BindPaginationData();
								ItemMasterBind();
							}, function(reason){ 
								notification.notify("Save Failed");
							});

						}
					}
					else{
						var promise=httpPreConfig({ method: 'POST', url: 'updateItemMasterDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:{newFields : $scope.ProductMaster , finishedOrRaw : $scope.ProductMaster1}  });
						promise.then(function (response) {  
							$scope.btnName="Update";
							notification.notify("The changes have been updated.");
							ItemMasterBind();
						}, function(reason){ 
							notification.notify("Update Failed");
						});
					}
				//	BindData();
					form.$setPristine();
					form.$setUntouched();
					$scope.showTable=true;
					
					
				}
				
				productMasterController.newColumnItem = function(){
					state.go('landingScreen.AddNewColumn');
				}
				
				productMasterController.RemoveData = function(ev,pm){
					
					var confirm = mdDialog.confirm().title('Are you sure you want to delete?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () { 
						var promise=httpPreConfig({ method: 'POST', url: 'deleteItemMasterDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:pm  });
						promise.then(function (response) {  
							notification.notify("The entry has been deleted.");
							BindPaginationData();
							ItemMasterBind();
						}, function(reason){ 
							notification.notify("Delete Failed");
						});
	        		}, function () { });
				}
				
				productMasterController.CopyData = function ($event,Data,form){
					
					var checkNew=productMasterController.Grid_Data.data[0].ispossibletoNew;
					
					if(checkNew){
						productMasterController.newItem(form);
						$scope.ProductMaster1 = {};
						$scope.LastCopied=angular.copy(Data);
						$scope.ProductMaster=angular.copy(Data);
						$scope.ProductMaster1.finishOrRaw = Data.finishOrRaw;
						$scope.LastCopied.itemmasterID={};
						$scope.ProductMaster.itemmasterID={};
					}
					else{
						notification.notify("Base UPC out of range.");
					}
				}
				
				productMasterController.closeForm = function(ev){
					$scope.showTable=!$scope.showTable;
					//ItemMasterBind();
				}
				
				
				productMasterController.ClickSize = function(ev){
									
									mdDialog.show({
						                  clickOutsideToClose: true,
						                  scope:$scope,
						                  preserveScope: true,    
						    		      fullscreen: 'md' ,       
						                  templateUrl: 'Size.html',
						                  controller: function DialogController($scope, $mdDialog) {
						                	 $scope.closeDialog = function() { $mdDialog.hide(); }
						                    
						                	 $scope.saveSizeDialog = function(ev,Size){
						                		 var promise=httpPreConfig({ method: 'POST', url: 'insertStaticSizeBODetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:Size  });
						 							promise.then(function (response) {  
						 								notification.notify("The entry has been successfully added.");
						 								SizeBindData();
						 								$scope.Size={};
						 								$mdDialog.hide();
						 							}, function(reason){ 
						 								notification.notify("Save Failed");
						 							});
						                	 }
						                	 
						                  }
						               });
								
								}
				

				productMasterController.ClickNoSize = function(ev){
					
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'NoSize.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	 $scope.closeDialog = function() { $mdDialog.hide(); }
		                	 
		                	 $scope.saveNOSizeDialog = function(ev,NOSize){
		                		 var promise=httpPreConfig({ method: 'POST', url: 'insertStaticNOSizeBODetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:NOSize  });
									promise.then(function (response) {  
										$scope.btnName="Update";
										notification.notify("The entry has been successfully added.");
										SizeBindData();
		 								$scope.NOSize={};
		 								$scope.ProductMaster.pkSizeID={};
		 								$mdDialog.hide();
										
									}, function(reason){ 
										notification.notify("Save Failed");
									});
		                	 }
		                	 
		                  }
		               });
				
				}
				
				productMasterController.ClickShopifySize = function(ev){
					
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'ShopifySize.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	 $scope.closeDialog = function() { $mdDialog.hide(); }
		                    
		                	 $scope.saveShopifySizeDialog=function(ev,ShopifySize){
		                		 
		                		 var promise=httpPreConfig({ method: 'POST', url: 'insertStaticShopifySizeBODetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:ShopifySize  });
									promise.then(function (response) {  
										$scope.btnName="Update";
										notification.notify("The entry has been successfully added.");
										SizeBindData();
										$scope.ProductMaster.pkSizeID={};
		 								$scope.ShopifySize={};
		 								$mdDialog.hide();
									}, function(reason){ 
										notification.notify("Save Failed");
									});
		                		 
		                	 }
		                  }
		               });
				
				}
				
				productMasterController.ClickFashionPyramid = function(ev){
					
					mdDialog.show({
				          clickOutsideToClose: true,
				          scope:$scope,
				          preserveScope: true,    
					      fullscreen: 'md' ,       
				          templateUrl: 'FashionPyramid.html',
				          controller: function DialogController($scope, $mdDialog) {
				        	 $scope.closeDialog = function() { $mdDialog.hide(); }
				            
				        	 $scope.saveFashionPyramidDialog = function(ev,FashionPyramid){
				        		 var promise=httpPreConfig({ method: 'POST', url: 'insertStaticFashionPyramidDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:FashionPyramid  });
		 							promise.then(function (response) {  
		 								
		 								notification.notify("The entry has been successfully added.");
		 								$scope.FashionPyramid={};
		 								$scope.ProductMaster.pkFashionPyramidID={};
		 								FashionPyramidBindData();
		 								$mdDialog.hide();
		 							}, function(reason){ 
		 								notification.notify("Save Failed");
		 							});
				        	 }
				          }
				       });
				
				}
								
				
				productMasterController.ClickOccasion = function(ev){
					
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'Occasion.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	 $scope.closeDialog = function() { $mdDialog.hide(); }
		                	 
		                	 $scope.saveOccassionDialog = function(ev,Occassion){
		                		 var promise=httpPreConfig({ method: 'POST', url: 'insertStaticOccasionDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:Occassion  });
		 							promise.then(function (response) {  
		 								$scope.Occassion={};
		 								$scope.ProductMasterpkOccasionID={};
		 								notification.notify("The entry has been successfully added.");
		 								OccasionBindData();
		 								$mdDialog.hide();
		 							}, function(reason){ 
		 								notification.notify("Save Failed");
		 							});
		                	 }
		                  }
		               });
				
				}
				
				productMasterController.ClickCategory = function(ev){
					
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'Category.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	 $scope.closeDialog = function() { $mdDialog.hide(); }
		                    
		                	 $scope.saveCategoryMasterDialog= function($event,CategoryMaster){
		                		 var promise=httpPreConfig({ method: 'POST', url: 'insertStaticCategoryDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:CategoryMaster  });
									promise.then(function (response) {  
										CategoryBindData();
										notification.notify("The entry has been successfully added.");
										$scope.CategoryMaster={};
										$scope.ProductMaster.pkCategoryID={};
										$mdDialog.hide();
									}, function(reason){ 
										notification.notify("Save Failed");
									});

		                	 }
		                  }
		               });
				
				}
				
				productMasterController.ClickSubCategory = function(ev){
					
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'SubCategory.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	 $scope.closeDialog = function() { $mdDialog.hide(); }
		                    
		                	 $scope.saveSubCategoryDialog= function($event,SubCategory){
		                		 
		                		 var promise=httpPreConfig({ method: 'POST', url: 'insertStaticSubCategoryDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:SubCategory  });
		 							promise.then(function (response) {  
		 								
		 								notification.notify("The entry has been successfully added.");
		 								CategoryBindData();
		 								$scope.SubCategory={};
		 								$scope.ProductMaster.pkCategoryID={};
		 								$mdDialog.hide();
		 							}, function(reason){ 
		 								notification.notify("Save Failed");
		 							});
		                	 }
		                	 
		                	 
		                  }
		               });
				
				}
				
				productMasterController.ClickNoCategory = function(ev){
					
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'NoCategory.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	 $scope.closeDialog = function() { $mdDialog.hide(); }
		                    
		                	 $scope.saveNoCategoryDialog = function(ev,NoCategory){
		                		 var promise=httpPreConfig({ method: 'POST', url: 'insertStaticNocategoryDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:NoCategory  });
		 							promise.then(function (response) {  
		 								notification.notify("The entry has been successfully added.");
		 								NoCategoryBindData();
		 								$scope.NoCategory={};
		 								$scope.ProductMaster.pknOCategoryID={};
		 								$mdDialog.hide();
		 							}, function(reason){ 
		 								notification.notify("Save Failed");
		 							});

		                	 }
		                  }
		               });
				
				}
				
				productMasterController.ClickNoCategoryCode = function(ev){
					
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'NoCategoryCode.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	 $scope.closeDialog = function() { $mdDialog.hide(); }
		                    
		                	 $scope.saveNoCategoryCodeDialog = function(ev,NoCategoryCode){
		                		 var promise=httpPreConfig({ method: 'POST', url: 'insertStaticNocategoryCodeDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:NoCategoryCode  });
		 							promise.then(function (response) {  
		 								
		 								notification.notify("The entry has been successfully added.");
		 								NoCategoryCodeBindData();
		 								$scope.NoCategoryCode={};
		 								$scope.ProductMaster.pknOCategoryID={};
		 								$mdDialog.hide();
		 							}, function(reason){ 
		 								notification.notify("Save Failed");
		 							});

		                	 }
		                  }
		               });
				
				}
				
				
				

				productMasterController.ClickFabricType = function(ev){
					
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'FabricType.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	 $scope.closeDialog = function() { $mdDialog.hide(); }
		                    
		                	 $scope.saveFabricTypeDialog= function($event,FabricType){
		                		 var promise=httpPreConfig({ method: 'POST', url: 'insertStaticFabrictypeDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:FabricType  });
		 							promise.then(function (response) {  
		 								
		 								notification.notify("The entry has been successfully added.");
		 								$scope.FabricType={};
		 								$scope.ProductMaster.pkFabricType={};
		 								FabricTypeBindData();
		 								$mdDialog.hide();
		 							}, function(reason){ 
		 								notification.notify("Save Failed");
		 							});
		                	 }
		                	
		                  }
		               });
				
				}

				productMasterController.ClickProductType = function(ev){
					
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'ProductType.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	 $scope.closeDialog = function() { $mdDialog.hide(); }
		                    
		                	 $scope.saveProductTypeDialog=function(ev,ProductType){
		                		 
		                		 var promise=httpPreConfig({ method: 'POST', url: 'insertStaticStaticProductTypeDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:ProductType  });
		 							promise.then(function (response) {  
		 								notification.notify("The entry has been successfully added.");
		 								ProductTypeBindData();
		 								$scope.ProductMaster.pkProductType={}
		 								$scope.ProductType={};
		 								$mdDialog.hide();
		 							}, function(reason){ 
		 								notification.notify("Save Failed");
		 							});
		                	 }
		                  }
		               });
				
				}
				
				
				
				productMasterController.ClickFabrication = function(ev){
					
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'Fabrication.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	 $scope.closeDialog = function() { $mdDialog.hide(); }
		                    
		                	 $scope.saveFabricationDialog=function(ev,Fabrication){
		                		 
		                		 var promise=httpPreConfig({ method: 'POST', url: 'insertStaticFabricationDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:Fabrication  });
		 							promise.then(function (response) {  
		 								notification.notify("The entry has been successfully added.");
		 								FabricationBindData();
		 								$scope.ProductMaster.pkFabricationID={}
		 								$scope.Fabrication={};
		 								$mdDialog.hide();
		 							}, function(reason){ 
		 								notification.notify("Save Failed");
		 							});
		                	 }
		                  }
		               });
				
				}
				
				productMasterController.ClickProductStyle = function(ev,ProductStyle){
					
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'ProductStyle.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	 $scope.closeDialog = function() { $mdDialog.hide(); }
		                    
		                	 $scope.saveProductStyleDialog=function(ev,ProductStyle){
		                		 
		                		 var promise=httpPreConfig({ method: 'POST', url: 'insertStaticProductStyleDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:ProductStyle  });
		 							promise.then(function (response) {  
		 								notification.notify("The entry has been successfully added.");
		 								ProductStyleBindData();
		 								$scope.ProductMaster.pkProductStyleID={}
		 								$scope.ProductStyle={};
		 								$mdDialog.hide();
		 							}, function(reason){ 
		 								notification.notify("Save Failed");
		 							});
		                	 }
		                	 
		                  }
		               });
				
				}
				
				productMasterController.ClickColorFamily = function(ev){
					
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'ColorFamily.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	 $scope.closeDialog = function() { $mdDialog.hide(); }
		                    
		                	 $scope.saveColorFamilyDialog=function(ev,ColorFamily){
		                		 
		                		 var promise=httpPreConfig({ method: 'POST', url: 'insertStaticColorfamilyDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.ColorFamily  });
		 							promise.then(function (response) {  
		 								notification.notify("The entry has been successfully added.");
		 								ColorFamilyBindData();
		 								$scope.ProductMaster.pkColorFamilyID={}
		 								$scope.ColorFamily={};
		 								$mdDialog.hide();
		 							}, function(reason){ 
		 								notification.notify("Save Failed");
		 							});
		                	 }
		                  }
		               });
				
				}
				
				productMasterController.ClickColorVariant = function(ev){
					
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'ColorVarient.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	 $scope.closeDialog = function() { $mdDialog.hide(); }
		                    
		                	 $scope.saveColorVariantDialog= function(ev,ColorVariant){
		                		 
		                		 var promise=httpPreConfig({ method: 'POST', url: 'insertStaticColorvariantDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:ColorVariant  });
		 							promise.then(function (response) {  
		 								
		 								notification.notify("The entry has been successfully added.");
		 								$scope.ColorVariant={};
		 								$scope.ProductMaster.pkColorFamilyID={};
		 								ColorFamilyBindData();
		 								$mdDialog.hide();
		 							}, function(reason){ 
		 								notification.notify("Save Failed");
		 							});
		                	 }
		                  }
		               });
				
				}
				
				productMasterController.ClickShade = function(ev){
					
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'Shade.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	 $scope.closeDialog = function() { $mdDialog.hide(); }
		                    
		                	 $scope.saveShadeDialog = function(ev,Shade){
		                		 var promise=httpPreConfig({ method: 'POST', url: 'insertStaticShadeDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:Shade  });
		 							promise.then(function (response) {  
		 								ColorFamilyBindData();
		 								$scope.Shade={};
		 								$scope.ProductMaster.pkColorVariantID={};
		 								$scope.ProductMaster.pkColorFamilyID={};
		 								$scope.ProductMaster.pkShadeID={};
		 								notification.notify("The entry has been successfully added.");
		 								$mdDialog.hide();
		 							}, function(reason){ 
		 								notification.notify("Save Failed");
		 							});
		                	 }
		                  }
		               });
				
				}
				
				productMasterController.ClickPattern = function(ev){
					
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'Pattern.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	 $scope.closeDialog = function() { $mdDialog.hide(); }
		                    
		                	 $scope.savePatternDialog= function($event,Pattern){
		                		 
		                		 var promise=httpPreConfig({ method: 'POST', url: 'insertStaticPatternDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:Pattern  });
		 							promise.then(function (response) {  
		 								
		 								notification.notify("The entry has been successfully added.");
		 								PatternBindData();
		 								$scope.Pattern={};
		 								$scope.ProductMaster.pkPatternID={};
		 								$mdDialog.hide();
		 							}, function(reason){ 
		 								notification.notify("Save Failed");
		 							});
		                	 }
		                	 
		                	 
		                  }
		               });
				
				}
				productMasterController.ClickScale = function(ev){
					
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'Scale.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	 $scope.closeDialog = function() { $mdDialog.hide(); }
		                    
		                	 $scope.saveScaleDialog = function(ev,Scale){
		                		 
		                		 var promise=httpPreConfig({ method: 'POST', url: 'insertStaticScaleDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:Scale  });
		 							promise.then(function (response) {  
		 								
		 								notification.notify("The entry has been successfully added.");
		 								ScaleBindData();
		 								$scope.Scale={};
		 								$scope.ProductMaster.pkScaleID={};
		 								$mdDialog.hide();
		 								
		 							}, function(reason){ 
		 								notification.notify("Save Failed");
		 							});
		                	 }
		                	 
		                  }
		               });
				
				}
				
				productMasterController.ClickNoSession = function(ev){
					
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'NoSession.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	 $scope.closeDialog = function() { $mdDialog.hide(); }
		                    
		                	 $scope.saveNoSessionDialog = function($event,NoSession){
		                		 
		                		 var promise=httpPreConfig({ method: 'POST', url: 'insertStaticNoseasonDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:NoSession  });
		 							promise.then(function (response) {  
		 								NoSessionBindData();
		 								notification.notify("The entry has been successfully added.");
		 								$scope.NoSession={};
		 								$scope.ProductMaster.pkNOSeasonID={};
		 								$mdDialog.hide();
		 							}, function(reason){ 
		 								notification.notify("Save Failed");
		 							});
		                	 }
		                	
		                  }
		               });
				
				}

				productMasterController.ClickSession = function(ev){
					
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'Session.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	 $scope.closeDialog = function() { $mdDialog.hide(); }
		                    
		                	 $scope.saveDialog = function($event,Session){
		                		 var promise=httpPreConfig({ method: 'POST', url: 'insertStaticSeasonDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:Session  });
		 							promise.then(function (response) {  
		 								
		 								notification.notify("The entry has been successfully added.");
		 								SessionBindData();
		 								$scope.Session={};
		 								$scope.ProductMaster.pkSeasonID={};
		 								$mdDialog.hide();
		 							}, function(reason){ 
		 								notification.notify("Save Failed");
		 							});
		                	 }
		                	
		                  }
		               });
				
				}
				productMasterController.ClickCollection = function(ev){
					
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'Collection.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	 $scope.closeDialog = function() { $mdDialog.hide(); }
		                	 
		                	 $scope.saveCollectionDialog= function($event,Collection){
		                		 var promise=httpPreConfig({ method: 'POST', url: 'insertStaticCollectionDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:Collection  });
		 							promise.then(function (response) {  
		 								notification.notify("The entry has been successfully added.");
		 								$scope.Collection={};
		 								CollectionBindData();
		 								$mdDialog.hide();
		 							}, function(reason){ 
		 								notification.notify("Save Failed");
		 							});
		                	 }
		                  }
		               });
				
				}
				productMasterController.ClickCollar = function(ev){
					
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'Collar.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	 $scope.closeDialog = function() { $mdDialog.hide(); }
		                     
		                	 $scope.saveCollarDialog= function($event,Collar){
		                		 
		                		 var promise=httpPreConfig({ method: 'POST', url: 'insertStaticCollarDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:Collar  });
		 							promise.then(function (response) {  
		 								notification.notify("The entry has been successfully added.");
		 								CollarBindData();
		 								$scope.Collar={};
		 								$mdDialog.hide();
		 							}, function(reason){ 
		 								notification.notify("Save Failed");
		 							});
		                	 }
		                	 
		                  }
		               });
				
				}
				
				productMasterController.ClickBottomRise = function(ev){
					
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'BottomRise.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	 $scope.closeDialog = function() { $mdDialog.hide(); }
		                	 
		                	 $scope.saveBottomRiseDialog = function($event,BottomRise){
		                		 
		                		 var promise=httpPreConfig({ method: 'POST', url: 'insertStaticBottomriseDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:BottomRise  });
		 							promise.then(function (response) {  
		 								notification.notify("The entry has been successfully added.");
		 								BottomRiseBindData();
		 								$scope.BottomRise={};
		 								$mdDialog.hide();
		 								
		 							}, function(reason){ 
		 								notification.notify("Save Failed");
		 							});
		                	 }
		                  }
		               });
				
				}
	        }],
	        controllerAs: 'productMasterController',
	        link: function(scope, element, attrs, controllers) { },
	        templateUrl : 'Authentication/View/productMaster.html'
	    };
	}); 
  
  ScreenDirectives.directive('categoryMaster', function() {
	  return {
	        restrict : "E",
	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification){
	        	var categoryMasterController = this;
	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
	        	$scope.roleBasedRestriction =  window.localStorage.getItem("roleBasedRestriction");
	        	$scope.showTable=true;
				$scope.btnName="Save";
				categoryMasterController.options ={"pageSelect":1}
				categoryMasterController.query={limit:50,page:1}
				$scope.listStyle = { height: (window.innerHeight - (200)) + 'px' };
				$scope.BodylistStyle = { height: (window.innerHeight - 250) + 'px' };
				
				window.addEventListener('resize', onResize);
				function onResize() {
					$scope.listStyle.height = (window.innerHeight - 210) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				window.addEventListener('resize', onBodyResize);
				function onBodyResize() {
					$scope.BodylistStyle.height = (window.innerHeight - 250) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				BindData()
				function BindData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaiticCategoryDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { categoryMasterController.Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) } 
					}, function(reason){ });
				}
				
				
				categoryMasterController.ViewData = function(ev,cm){
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'viewDetails.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	  $scope.CategoryMaster=angular.copy(cm);
		                     $scope.closeDialog = function() { $mdDialog.hide(); }
		                    
		                     $scope.editDialog =function(ev,pm){ $mdDialog.hide(); categoryMasterController.EditData(ev,cm) }
		                  }
		               });
				}
				
				
				categoryMasterController.EditData= function(ev,cm){
					$scope.showTable=false;
					$scope.btnName="Update";
					$scope.CategoryMaster=angular.copy(cm);
					$scope.CategoryMasterForm.$setPristine();
					$scope.CategoryMasterForm.$setUntouched();
				}
				
				categoryMasterController.clearAll = function($event,form){
					$scope.CategoryMaster={};
					categoryMasterController.newItem(form);
				}
				
				categoryMasterController.newItem = function(form){
					$scope.CategoryMaster={};
					$scope.showTable=false;
					$scope.btnName="Save";
					form.$setPristine();
					form.$setUntouched();
				}
				
				 
				 
				 
				
				categoryMasterController.saveData = function(ev,form){
					
					if($scope.btnName == "Save"){
						
						if(angular.equals($scope.LastCopied,$scope.CategoryMaster)){
							notification.notify("Copied item Not Modified");
						}
						else{
							var promise=httpPreConfig({ method: 'POST', url: 'insertStaticCategoryDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.CategoryMaster  });
							promise.then(function (response) {  
								$scope.btnName="Update";
								notification.notify("The entry has been successfully added.");
								BindData()
							}, function(reason){ 
								notification.notify("Save Failed");
							});

						}
					}
					else{
						var promise=httpPreConfig({ method: 'POST', url: 'updateStaticCategoryDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.CategoryMaster  });
						promise.then(function (response) {  
							$scope.btnName="Update";
							notification.notify("The changes have been updated");
							BindData()
						}, function(reason){ 
							notification.notify("Update Failed");
						});
					}
					form.$setPristine();
					form.$setUntouched();
					$scope.showTable=true;
				}
				
				
				categoryMasterController.RemoveData = function(ev,cm){
					
					var confirm = mdDialog.confirm().title('Are you sure you want to delete?').targetEvent(ev).ok('Yes').cancel('No');
					mdDialog.show(confirm).then(function () { 
						var promise=httpPreConfig({ method: 'POST', url: 'deleteStaticCategoryDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:cm  });
						promise.then(function (response) {  
							notification.notify("The entry has been successfully deleted");
							BindData()
						}, function(reason){ 
							notification.notify("Delete Failed");
						});
					}, function () { });
					
				}
				
				categoryMasterController.CopyData = function ($event,Data,form){
					categoryMasterController.newItem(form);
					$scope.LastCopied=angular.copy(Data);
					$scope.CategoryMaster=angular.copy(Data);
					
				}
				
				categoryMasterController.closeForm = function(ev){
					$scope.showTable=!$scope.showTable;
				}
	        	
				
	        }],
	        controllerAs: 'categoryMasterController',
	        link: function(scope, element, attrs, controllers) { },
	        templateUrl : 'Authentication/View/CategoryMaster.html'
	    };
	}); 
  

  ScreenDirectives.directive('occasion', function() {
 	  return {
 	        restrict : "E",
 	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification){
 	        	var occasionController = this;
 	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
 	        	$scope.roleBasedRestriction =  window.localStorage.getItem("roleBasedRestriction");
 	        	$scope.showTable=true;
 				$scope.btnName="Save";
 				occasionController.options ={"pageSelect":1}
 				occasionController.query={limit:5,page:1}
 				$scope.listStyle = { height: (window.innerHeight - (200)) + 'px' };
				$scope.BodylistStyle = { height: (window.innerHeight - 250) + 'px' };
				
				window.addEventListener('resize', onResize);
				function onResize() {
					$scope.listStyle.height = (window.innerHeight - 210) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				window.addEventListener('resize', onBodyResize);
				function onBodyResize() {
					$scope.BodylistStyle.height = (window.innerHeight - 250) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
 				BindData()
 				function BindData(){
 					var promise=httpPreConfig({ method: 'GET', url: 'getStaticOccasionDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
 					promise.then(function (response) { occasionController.Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) } 
 					}, function(reason){ });
 				}
 				
 				
 				occasionController.ViewData = function(ev,cm){
 					mdDialog.show({
 		                  clickOutsideToClose: true,
 		                  scope:$scope,
 		                  preserveScope: true,    
 		    		      fullscreen: 'md' ,       
 		                  templateUrl: 'viewDetails.html',
 		                  controller: function DialogController($scope, $mdDialog) {
 		                	  $scope.occasion=angular.copy(cm);
 		                     $scope.closeDialog = function() { $mdDialog.hide(); }
 		                    
 		                     $scope.editDialog =function(ev,pm){ $mdDialog.hide(); occasionController.EditData(ev,cm) }
 		                  }
 		               });
 				}
 				
 				
 				occasionController.EditData= function(ev,cm){
 					$scope.showTable=false;
 					$scope.btnName="Update";
 					$scope.occasion=angular.copy(cm);
 					$scope.occasionForm.$setPristine();
 					$scope.occasionForm.$setUntouched();
 				}
 				
 				occasionController.clearAll = function($event,form){
 					$scope.occasion={};
 					occasionController.newItem(form);
 				}
 				
 				occasionController.newItem = function(form){
 					$scope.occasion={};
 					$scope.showTable=false;
 					$scope.btnName="Save";
 					form.$setPristine();
 					form.$setUntouched();
 				}
 				
 				
 				 
 				 
 				 
 				
 				occasionController.saveData = function(ev,form){
 					
 					if($scope.btnName == "Save"){
 						
 						if(angular.equals($scope.LastCopied,$scope.occasion)){
 							notification.notify("Copied item Not Modified");
 						}
 						else{
 							var promise=httpPreConfig({ method: 'POST', url: 'insertStaticOccasionDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.occasion  });
 							promise.then(function (response) {  
 								$scope.btnName="Update";
 								notification.notify("The entry has been successfully added.");
 								BindData();
 							}, function(reason){ 
 								notification.notify("Save Failed");
 							});

 						}
 					}
 					else{
 						var promise=httpPreConfig({ method: 'POST', url: 'updateStaticOccasionDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.occasion  });
 						promise.then(function (response) {  
 							$scope.btnName="Update";
 							notification.notify("The changes have been updated.");
 							BindData();
 						}, function(reason){ 
 							notification.notify("Update Failed");
 						});
 					}
 					
 					form.$setPristine();
 					form.$setUntouched();
 					$scope.showTable=true;
 				}
 				
 				
 				occasionController.RemoveData = function(ev,cm){
 					var confirm = mdDialog.confirm().title('Are you sure you want to delete?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () { 
 					var promise=httpPreConfig({ method: 'POST', url: 'deleteStaticOccasionDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:cm  });
 					promise.then(function (response) {  
 						notification.notify("The entry has been deleted.");
 						BindData();
 					}, function(reason){ 
 						notification.notify("Delete Failed");
 					});
	        		},function(){});
 				}
 				
 				occasionController.CopyData = function ($event,Data,form){
 					occasionController.newItem(form);
 					$scope.LastCopied=angular.copy(Data);
 					$scope.occasion=angular.copy(Data);
 					
 				}
 				
 				occasionController.closeForm = function(ev){
 					$scope.showTable=!$scope.showTable;
 				}
 	        	
 				
 	        }],
 	        controllerAs: 'occasionController',
 	        link: function(scope, element, attrs, controllers) { },
 	        templateUrl : 'Authentication/View/occasion.html'
 	    };
 	}); 
   
  ScreenDirectives.directive('subCategory', function() {
 	  return {
 	        restrict : "E",
 	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification){
 	        	var SubCategoryController = this;
 	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
 	        	$scope.roleBasedRestriction =  window.localStorage.getItem("roleBasedRestriction");
 	        	$scope.showTable=true;
 				$scope.btnName="Save";
 				SubCategoryController.options ={"pageSelect":1}
 				SubCategoryController.query={limit:50,page:1}
 				$scope.listStyle = { height: (window.innerHeight - (200)) + 'px' };
				$scope.BodylistStyle = { height: (window.innerHeight - 250) + 'px' };
				
				window.addEventListener('resize', onResize);
				function onResize() {
					$scope.listStyle.height = (window.innerHeight - 210) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				window.addEventListener('resize', onBodyResize);
				function onBodyResize() {
					$scope.BodylistStyle.height = (window.innerHeight - 250) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
 				BindData()
 				function BindData(){
 					var promise=httpPreConfig({ method: 'GET', url: 'getSubCategoryDetailsDatabase', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
 					promise.then(function (response) { SubCategoryController.Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) } 
 					}, function(reason){ });
 					BindCategoryData();
 				}
 				
 				
 				function BindCategoryData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaiticCategoryDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { SubCategoryController.Category_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) } 
					}, function(reason){ });
				}
 				
 				SubCategoryController.ViewData = function(ev,cm){
 					mdDialog.show({
 		                  clickOutsideToClose: true,
 		                  scope:$scope,
 		                  preserveScope: true,    
 		    		      fullscreen: 'md' ,       
 		                  templateUrl: 'viewDetails.html',
 		                  controller: function DialogController($scope, $mdDialog) {
 		                	  $scope.SubCategory=angular.copy(cm);
 		                     $scope.closeDialog = function() { $mdDialog.hide(); }
 		                    
 		                     $scope.editDialog =function(ev,pm){ $mdDialog.hide(); SubCategoryController.EditData(ev,cm) }
 		                  }
 		               });
 				}
 				
 				
 				SubCategoryController.EditData= function(ev,cm){
 					$scope.showTable=false;
 					$scope.btnName="Update";
 					$scope.SubCategory=angular.copy(cm);
 					$scope.SubCategoryForm.$setPristine();
 					$scope.SubCategoryForm.$setUntouched();
 				}
 				
 				SubCategoryController.clearAll = function($event,form){
 					$scope.SubCategory={};
 					SubCategoryController.newItem(form);
 				}
 				
 				SubCategoryController.newItem = function(form){
 					$scope.SubCategory={};
 					$scope.showTable=false;
 					$scope.btnName="Save";
 					form.$setPristine();
 					form.$setUntouched();
 				}
 				
 				
 				SubCategoryController.saveData = function(ev,form){
 					
 					if($scope.btnName == "Save"){
 						
 						if(angular.equals($scope.LastCopied,$scope.SubCategory)){
 							notification.notify("Copied item Not Modified");
 						}
 						else{
 							var promise=httpPreConfig({ method: 'POST', url: 'insertStaticSubCategoryDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.SubCategory  });
 							promise.then(function (response) {  
 								$scope.btnName="Update";
 								notification.notify("The entry has been successfully added.");
 								BindData();
 							}, function(reason){ 
 								notification.notify("Save Failed");
 							});

 						}
 					}
 					else{
 						var promise=httpPreConfig({ method: 'POST', url: 'updateStaticSubCategoryDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.SubCategory  });
 						promise.then(function (response) {  
 							$scope.btnName="Update";
 							notification.notify("The changes have been updated.");
 							BindData();
 						}, function(reason){ 
 							notification.notify("Update Failed");
 						});
 					}
 					
 					form.$setPristine();
 					form.$setUntouched();
 					$scope.showTable=true;
 				}
 				
 				
 				SubCategoryController.RemoveData = function(ev,cm){
 					
 					var confirm = mdDialog.confirm().title('Are you sure you want to delete?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () { 
 					var promise=httpPreConfig({ method: 'POST', url: 'deleteStaticSubCategoryDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:cm  });
 					promise.then(function (response) {  
 						notification.notify("The entry has been deleted.");
 						BindData();
 					}, function(reason){ 
 						notification.notify("Delete Failed");
 					});
	        		},function(){});
 				}
 				
 				SubCategoryController.CopyData = function ($event,Data,form){
 					SubCategoryController.newItem(form);
 					$scope.LastCopied=angular.copy(Data);
 					$scope.SubCategory=angular.copy(Data);
 					
 				}
 				
 				SubCategoryController.closeForm = function(ev){
 					$scope.showTable=!$scope.showTable;
 				}
 	        	
 				
 	        }],
 	        controllerAs: 'SubCategoryController',
 	        link: function(scope, element, attrs, controllers) { },
 	        templateUrl : 'Authentication/View/SubCategory.html'
 	    };
 	}); 
   
  ScreenDirectives.directive('noCategory', function() {
 	  return {
 	        restrict : "E",
 	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification){
 	        	var NoCategoryController = this;
 	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
 	        	$scope.roleBasedRestriction =  window.localStorage.getItem("roleBasedRestriction");
 	        	$scope.showTable=true;
 				$scope.btnName="Save";
 				NoCategoryController.options ={"pageSelect":1}
 				NoCategoryController.query={limit:50,page:1}
 				$scope.listStyle = { height: (window.innerHeight - (200)) + 'px' };
				$scope.BodylistStyle = { height: (window.innerHeight - 250) + 'px' };
				
				window.addEventListener('resize', onResize);
				function onResize() {
					$scope.listStyle.height = (window.innerHeight - 210) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				window.addEventListener('resize', onBodyResize);
				function onBodyResize() {
					$scope.BodylistStyle.height = (window.innerHeight - 250) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				
 				BindData()
 				function BindData(){
 					var promise=httpPreConfig({ method: 'GET', url: 'getStaticNocategoryDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
 					promise.then(function (response) { NoCategoryController.Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) } 
 					}, function(reason){ });
 				}
 				
 				
 				NoCategoryController.ViewData = function(ev,cm){
 					mdDialog.show({
 		                  clickOutsideToClose: true,
 		                  scope:$scope,
 		                  preserveScope: true,    
 		    		      fullscreen: 'md' ,       
 		                  templateUrl: 'viewDetails.html',
 		                  controller: function DialogController($scope, $mdDialog) {
 		                	  $scope.NoCategory=angular.copy(cm);
 		                     $scope.closeDialog = function() { $mdDialog.hide(); }
 		                    
 		                     $scope.editDialog =function(ev,pm){ $mdDialog.hide(); NoCategoryController.EditData(ev,cm) }
 		                  }
 		               });
 				}
 				
 				
 				NoCategoryController.EditData= function(ev,cm){
 					$scope.showTable=false;
 					$scope.btnName="Update";
 					$scope.NoCategory=angular.copy(cm);
 					$scope.NoCategoryForm.$setPristine();
 					$scope.NoCategoryForm.$setUntouched();
 				}
 				
 				NoCategoryController.clearAll = function($event,form){
 					
 					$scope.NoCategory={};
 					NoCategoryController.newItem(form);
 				}
 				
 				NoCategoryController.newItem = function(form){
 					
 					$scope.NoCategory={};
 					$scope.showTable=false;
 					$scope.btnName="Save";
 					form.$setPristine();
 					form.$setUntouched();
 				}
 				
 				  
 					 
 				NoCategoryController.saveData = function(ev,form){
 					
 					if($scope.btnName == "Save"){
 						
 						if(angular.equals($scope.LastCopied,$scope.NoCategory)){
 							notification.notify("Copied item Not Modified");
 						}
 						else{
 							var promise=httpPreConfig({ method: 'POST', url: 'insertStaticNocategoryDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.NoCategory  });
 							promise.then(function (response) {  
 								$scope.btnName="Update";
 								notification.notify("The entry has been successfully added.");
 								BindData();
 							}, function(reason){ 
 								notification.notify("Save Failed");
 							});

 						}
 					}
 					else{
 						var promise=httpPreConfig({ method: 'POST', url: 'updateStaticNocategoryDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.NoCategory  });
 						promise.then(function (response) {  
 							$scope.btnName="Update";
 							notification.notify("The changes have been updated.");
 							BindData();
 						}, function(reason){ 
 							notification.notify("Update Failed");
 						});
 					}
 					
 					form.$setPristine();
 					form.$setUntouched();
 					$scope.showTable=true;
 				}
 				
 				
 				NoCategoryController.RemoveData = function(ev,cm){
 					
 					var confirm = mdDialog.confirm().title('Are you sure you want to delete?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () { 
 					
 					var promise=httpPreConfig({ method: 'POST', url: 'deleteStaticNocategoryDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:cm  });
 					promise.then(function (response) {  
 						notification.notify("The entry has been deleted.");
 						BindData();
 					}, function(reason){ 
 						notification.notify("Delete Failed");
 					});
	        		},function(){});
 				}
 				
 				NoCategoryController.CopyData = function ($event,Data,form){
 					NoCategoryController.newItem(form);
 					$scope.LastCopied=angular.copy(Data);
 					$scope.NoCategory=angular.copy(Data);
 					
 				}
 				
 				NoCategoryController.closeForm = function(ev){
 					$scope.showTable=!$scope.showTable;
 				}
 	        	
 				
 	        }],
 	        controllerAs: 'NoCategoryController',
 	        link: function(scope, element, attrs, controllers) { },
 	        templateUrl : 'Authentication/View/NoCategory.html'
 	    };
 	}); 
   
  ScreenDirectives.directive('noCategoryCode', function() {
 	  return {
 	        restrict : "E",
 	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification){
 	        	var NoCategoryCodeController = this;
 	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
 	        	$scope.roleBasedRestriction =  window.localStorage.getItem("roleBasedRestriction");
 	        	$scope.showTable=true;
 				$scope.btnName="Save";
 				NoCategoryCodeController.options ={"pageSelect":1}
 				NoCategoryCodeController.query={limit:50,page:1}
 				$scope.listStyle = { height: (window.innerHeight - (200)) + 'px' };
				$scope.BodylistStyle = { height: (window.innerHeight - 250) + 'px' };
				
				window.addEventListener('resize', onResize);
				function onResize() {
					$scope.listStyle.height = (window.innerHeight - 210) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				window.addEventListener('resize', onBodyResize);
				function onBodyResize() {
					$scope.BodylistStyle.height = (window.innerHeight - 250) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				
 				BindData()
 				function BindData(){
 					var promise=httpPreConfig({ method: 'GET', url: 'getNocategoryCode', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
 					promise.then(function (response) { NoCategoryCodeController.Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) } 
 					}, function(reason){ });
 					NoCategoryBindData();
 				}
 				
				function NoCategoryBindData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaticNocategoryDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) {  NoCategoryCodeController.NoCategory_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ });
				}
 				
 				
 				NoCategoryCodeController.ViewData = function(ev,cm){
 					mdDialog.show({
 		                  clickOutsideToClose: true,
 		                  scope:$scope,
 		                  preserveScope: true,    
 		    		      fullscreen: 'md' ,       
 		                  templateUrl: 'viewDetails.html',
 		                  controller: function DialogController($scope, $mdDialog) {
 		                	  $scope.NoCategoryCode=angular.copy(cm);
 		                     $scope.closeDialog = function() { $mdDialog.hide(); }
 		                    
 		                     $scope.editDialog =function(ev,pm){ $mdDialog.hide(); NoCategoryCodeController.EditData(ev,cm) }
 		                  }
 		               });
 				}
 				
 				
 				NoCategoryCodeController.EditData= function(ev,cm){
 					$scope.showTable=false;
 					$scope.btnName="Update";
 					$scope.NoCategoryCode=angular.copy(cm);
 					$scope.NoCategoryCodeForm.$setPristine();
 					$scope.NoCategoryCodeForm.$setUntouched();
 				}
 				
 				NoCategoryCodeController.clearAll = function($event,form){
 					
 					$scope.NoCategoryCode={};
 					NoCategoryCodeController.newItem(form);
 				}
 				
 				NoCategoryCodeController.newItem = function(form){
 					
 					$scope.NoCategoryCode={};
 					$scope.showTable=false;
 					$scope.btnName="Save";
 					form.$setPristine();
 					form.$setUntouched();
 				}
 				
 				  
 					 
 				NoCategoryCodeController.saveData = function(ev,form){
 					
 					if($scope.btnName == "Save"){
 						
 						if(angular.equals($scope.LastCopied,$scope.NoCategoryCode)){
 							notification.notify("Copied item Not Modified");
 						}
 						else{
 							var promise=httpPreConfig({ method: 'POST', url: 'insertStaticNocategoryCodeDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.NoCategoryCode  });
 							promise.then(function (response) {  
 								$scope.btnName="Update";
 								notification.notify("The entry has been successfully added.");
 								BindData();
 							}, function(reason){ 
 								notification.notify("Save Failed");
 							});

 						}
 					}
 					else{
 						var promise=httpPreConfig({ method: 'POST', url: 'updateStaticNocategoryCodeDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.NoCategoryCode  });
 						promise.then(function (response) {  
 							$scope.btnName="Update";
 							notification.notify("The changes have been updated.");
 							BindData();
 						}, function(reason){ 
 							notification.notify("Update Failed");
 						});
 					}
 					
 					form.$setPristine();
 					form.$setUntouched();
 					$scope.showTable=true;
 				}
 				
 				
 				NoCategoryCodeController.RemoveData = function(ev,cm){
 					
 					var confirm = mdDialog.confirm().title('Are you sure you want to delete?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () { 
 					
 					var promise=httpPreConfig({ method: 'POST', url: 'deleteStaticNocategoryCodeDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:cm  });
 					promise.then(function (response) {  
 						notification.notify("The entry has been deleted.");
 						BindData();
 					}, function(reason){ 
 						notification.notify("Delete Failed");
 					});
	        		},function(){});
 				}
 				
 				NoCategoryCodeController.CopyData = function ($event,Data,form){
 					NoCategoryCodeController.newItem(form);
 					$scope.LastCopied=angular.copy(Data);
 					$scope.NoCategoryCode=angular.copy(Data);
 					
 				}
 				
 				NoCategoryCodeController.closeForm = function(ev){
 					$scope.showTable=!$scope.showTable;
 				}
 	        	
 				
 	        }],
 	        controllerAs: 'NoCategoryCodeController',
 	        link: function(scope, element, attrs, controllers) { },
 	        templateUrl : 'Authentication/View/NoCategoryCode.html'
 	    };
 	}); 
  
  ScreenDirectives.directive('fabricType', function() {
 	  return {
 	        restrict : "E",
 	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification){
 	        	var FabricTypeController = this;
 	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
 	        	$scope.roleBasedRestriction =  window.localStorage.getItem("roleBasedRestriction");
 	        	$scope.showTable=true;
 				$scope.btnName="Save";
 				FabricTypeController.options ={"pageSelect":1}
 				FabricTypeController.query={limit:50,page:1}
 				$scope.listStyle = { height: (window.innerHeight - (200)) + 'px' };
				$scope.BodylistStyle = { height: (window.innerHeight - 250) + 'px' };
				
				window.addEventListener('resize', onResize);
				function onResize() {
					$scope.listStyle.height = (window.innerHeight - 210) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				window.addEventListener('resize', onBodyResize);
				function onBodyResize() {
					$scope.BodylistStyle.height = (window.innerHeight - 250) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
 				BindData()
 				function BindData(){
 					var promise=httpPreConfig({ method: 'GET', url: 'getStaticFabrictypeDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
 					promise.then(function (response) { FabricTypeController.Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) } 
 					}, function(reason){ });
 				}
 				
 				
 				FabricTypeController.ViewData = function(ev,cm){
 					mdDialog.show({
 		                  clickOutsideToClose: true,
 		                  scope:$scope,
 		                  preserveScope: true,    
 		    		      fullscreen: 'md' ,       
 		                  templateUrl: 'viewDetails.html',
 		                  controller: function DialogController($scope, $mdDialog) {
 		                	  $scope.FabricType=angular.copy(cm);
 		                     $scope.closeDialog = function() { $mdDialog.hide(); }
 		                    
 		                     $scope.editDialog =function(ev,pm){ $mdDialog.hide(); FabricTypeController.EditData(ev,cm) }
 		                  }
 		               });
 				}
 				
 				
 				FabricTypeController.EditData= function(ev,cm){
 					$scope.showTable=false;
 					$scope.btnName="Update";
 					$scope.FabricType=angular.copy(cm);
 					$scope.FabricTypeForm.$setPristine();
 					$scope.FabricTypeForm.$setUntouched();
 				}
 				
 				FabricTypeController.clearAll = function($event,form){
 					
 					$scope.FabricType={};
 					FabricTypeController.newItem(form);
 				}
 				
 				FabricTypeController.newItem = function(form){
 					
 					$scope.FabricType={};
 					$scope.showTable=false;
 					$scope.btnName="Save";
 					form.$setPristine();
 					form.$setUntouched();
 				}
 				
 				
 					 
 					 
 					 
 					 
 				
 				FabricTypeController.saveData = function(ev,form){
 					
 					if($scope.btnName == "Save"){
 						
 						if(angular.equals($scope.LastCopied,$scope.FabricType)){
 							notification.notify("Copied item Not Modified");
 						}
 						else{
 							var promise=httpPreConfig({ method: 'POST', url: 'insertStaticFabrictypeDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.FabricType  });
 							promise.then(function (response) {  
 								$scope.btnName="Update";
 								notification.notify("The entry has been successfully added.");
 								BindData();
 							}, function(reason){ 
 								notification.notify("Save Failed");
 							});

 						}
 					}
 					else{
 						var promise=httpPreConfig({ method: 'POST', url: 'updateStaticFabrictypeDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.FabricType  });
 						promise.then(function (response) {  
 							$scope.btnName="Update";
 							notification.notify("The changes have been updated.");
 							BindData();
 						}, function(reason){ 
 							notification.notify("Update Failed");
 						});
 					}
 					BindData();
 					form.$setPristine();
 					form.$setUntouched();
 					$scope.showTable=true;
 				}
 				
 				
 				FabricTypeController.RemoveData = function(ev,cm){
 					
 					var confirm = mdDialog.confirm().title('Are you sure you want to delete?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () { 
 					var promise=httpPreConfig({ method: 'POST', url: 'deleteStaticFabrictypeDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:cm  });
 					promise.then(function (response) {  
 						notification.notify("The entry has been deleted.");
 						BindData();
 					}, function(reason){ 
 						notification.notify("Delete Failed");
 					});
	        		},function(){});
 				}
 				
 				FabricTypeController.CopyData = function ($event,Data,form){
 					FabricTypeController.newItem(form);
 					$scope.LastCopied=angular.copy(Data);
 					$scope.FabricType=angular.copy(Data);
 					
 				}
 				
 				FabricTypeController.closeForm = function(ev){
 					$scope.showTable=!$scope.showTable;
 				}
 	        	
 				
 	        }],
 	        controllerAs: 'FabricTypeController',
 	        link: function(scope, element, attrs, controllers) { },
 	        templateUrl : 'Authentication/View/FabricType.html'
 	    };
 	}); 
   
  ScreenDirectives.directive('productType', function() {
 	  return {
 	        restrict : "E",
 	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification){
 	        	var ProductTypeController = this;
 	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
 	        	$scope.roleBasedRestriction =  window.localStorage.getItem("roleBasedRestriction");
 	        	$scope.showTable=true;
 				$scope.btnName="Save";
 				ProductTypeController.options ={"pageSelect":1}
 				ProductTypeController.query={limit:50,page:1}
 				$scope.listStyle = { height: (window.innerHeight - (200)) + 'px' };
				$scope.BodylistStyle = { height: (window.innerHeight - 250) + 'px' };
				
				window.addEventListener('resize', onResize);
				function onResize() {
					$scope.listStyle.height = (window.innerHeight - 210) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				window.addEventListener('resize', onBodyResize);
				function onBodyResize() {
					$scope.BodylistStyle.height = (window.innerHeight - 250) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
 				BindData()
 				function BindData(){
 					var promise=httpPreConfig({ method: 'GET', url: 'getStaticStaticProductTypeDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
 					promise.then(function (response) { ProductTypeController.Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) } 
 					}, function(reason){ });
 				}
 				
 				
 				ProductTypeController.ViewData = function(ev,cm){
 					mdDialog.show({
 		                  clickOutsideToClose: true,
 		                  scope:$scope,
 		                  preserveScope: true,    
 		    		      fullscreen: 'md' ,       
 		                  templateUrl: 'viewDetails.html',
 		                  controller: function DialogController($scope, $mdDialog) {
 		                	  $scope.ProductType=angular.copy(cm);
 		                     $scope.closeDialog = function() { $mdDialog.hide(); }
 		                    
 		                     $scope.editDialog =function(ev,pm){ $mdDialog.hide(); ProductTypeController.EditData(ev,cm) }
 		                  }
 		               });
 				}
 				
 				
 				ProductTypeController.EditData= function(ev,cm){
 					$scope.showTable=false;
 					$scope.btnName="Update";
 					$scope.ProductType=angular.copy(cm);
 					$scope.ProductTypeForm.$setPristine();
 					$scope.ProductTypeForm.$setUntouched();
 				}
 				
 				ProductTypeController.clearAll = function($event,form){
 					
 					$scope.ProductType={};
 					ProductTypeController.newItem(form);
 				}
 				
 				ProductTypeController.newItem = function(form){
 					
 					$scope.ProductType={};
 					$scope.showTable=false;
 					$scope.btnName="Save";
 					form.$setPristine();
 					form.$setUntouched();
 				}
 				
 				
 				ProductTypeController.saveData = function(ev,form){
 					
 					if($scope.btnName == "Save"){
 						
 						if(angular.equals($scope.LastCopied,$scope.ProductType)){
 							notification.notify("Copied item Not Modified");
 						}
 						else{
 							var promise=httpPreConfig({ method: 'POST', url: 'insertStaticStaticProductTypeDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.ProductType  });
 							promise.then(function (response) {  
 								$scope.btnName="Update";
 								notification.notify("The entry has been successfully added.");
 								BindData();
 							}, function(reason){ 
 								notification.notify("Save Failed");
 							});

 						}
 					}
 					else{
 						var promise=httpPreConfig({ method: 'POST', url: 'updateStaticStaticProductTypeDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.ProductType  });
 						promise.then(function (response) {  
 							$scope.btnName="Update";
 							notification.notify("The changes have been updated.");
 							BindData();
 						}, function(reason){ 
 							notification.notify("Update Failed");
 						});
 					}
 					
 					form.$setPristine();
 					form.$setUntouched();
 					$scope.showTable=true;
 				}
 				
 				
 				ProductTypeController.RemoveData = function(ev,cm){
 					
 					var confirm = mdDialog.confirm().title('Are you sure you want to delete?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () {
 					var promise=httpPreConfig({ method: 'POST', url: 'deleteStaticStaticProductTypeDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:cm  });
 					promise.then(function (response) {  
 						notification.notify("The entry has been deleted.");
 						BindData();
 					}, function(reason){ 
 						notification.notify("Delete Failed");
 					});
	        		},function(){});
 				}
 				
 				ProductTypeController.CopyData = function ($event,Data,form){
 					ProductTypeController.newItem(form);
 					$scope.LastCopied=angular.copy(Data);
 					$scope.ProductType=angular.copy(Data);
 					
 				}
 				
 				ProductTypeController.closeForm = function(ev){
 					$scope.showTable=!$scope.showTable;
 				}
 	        	
 				
 	        }],
 	        controllerAs: 'ProductTypeController',
 	        link: function(scope, element, attrs, controllers) { },
 	        templateUrl : 'Authentication/View/ProductType.html'
 	    };
 	}); 
  ScreenDirectives.directive('fabrication', function() {
 	  return {
 	        restrict : "E",
 	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification){
 	        	var FabricationController = this;
 	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
 	        	$scope.roleBasedRestriction =  window.localStorage.getItem("roleBasedRestriction");
 	        	$scope.showTable=true;
 				$scope.btnName="Save";
 				FabricationController.options ={"pageSelect":1}
 				FabricationController.query={limit:50,page:1}
 				$scope.listStyle = { height: (window.innerHeight - (200)) + 'px' };
				$scope.BodylistStyle = { height: (window.innerHeight - 250) + 'px' };
				
				window.addEventListener('resize', onResize);
				function onResize() {
					$scope.listStyle.height = (window.innerHeight - 210) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				window.addEventListener('resize', onBodyResize);
				function onBodyResize() {
					$scope.BodylistStyle.height = (window.innerHeight - 250) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
 				BindData()
 				function BindData(){
 					var promise=httpPreConfig({ method: 'GET', url: 'getStaticFabricationDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
 					promise.then(function (response) { FabricationController.Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) } 
 					}, function(reason){ });
 				}
 				
 				
 				FabricationController.ViewData = function(ev,cm){
 					mdDialog.show({
 		                  clickOutsideToClose: true,
 		                  scope:$scope,
 		                  preserveScope: true,    
 		    		      fullscreen: 'md' ,       
 		                  templateUrl: 'viewDetails.html',
 		                  controller: function DialogController($scope, $mdDialog) {
 		                	  $scope.Fabrication=angular.copy(cm);
 		                     $scope.closeDialog = function() { $mdDialog.hide(); }
 		                    
 		                     $scope.editDialog =function(ev,pm){ $mdDialog.hide(); FabricationController.EditData(ev,cm) }
 		                  }
 		               });
 				}
 				
 				
 				FabricationController.EditData= function(ev,cm){
 					$scope.showTable=false;
 					$scope.btnName="Update";
 					$scope.Fabrication=angular.copy(cm);
 					$scope.FabricationForm.$setPristine();
 					$scope.FabricationForm.$setUntouched();
 				}
 				
 				FabricationController.clearAll = function($event,form){
 					
 					$scope.Fabrication={};
 					FabricationController.newItem(form);
 				}
 				
 				FabricationController.newItem = function(form){
 					
 					$scope.Fabrication={};
 					$scope.showTable=false;
 					$scope.btnName="Save";
 					form.$setPristine();
 					form.$setUntouched();
 				}
 				
 				  
 				 
 			
 			
 				FabricationController.saveData = function(ev,form){
 					
 					if($scope.btnName == "Save"){
 						
 						if(angular.equals($scope.LastCopied,$scope.Fabrication)){
 							notification.notify("Copied item Not Modified");
 						}
 						else{
 							var promise=httpPreConfig({ method: 'POST', url: 'insertStaticFabricationDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.Fabrication  });
 							promise.then(function (response) {  
 								$scope.btnName="Update";
 								notification.notify("The entry has been successfully added.");
 								BindData();
 							}, function(reason){ 
 								notification.notify("Save Failed");
 							});

 						}
 					}
 					else{
 						var promise=httpPreConfig({ method: 'POST', url: 'updateStaticFabricationDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.Fabrication  });
 						promise.then(function (response) {  
 							$scope.btnName="Update";
 							notification.notify("The changes have been updated.");
 							BindData();
 						}, function(reason){ 
 							notification.notify("Update Failed");
 						});
 					}
 					
 					form.$setPristine();
 					form.$setUntouched();
 					$scope.showTable=true;
 				}
 				
 				
 				FabricationController.RemoveData = function(ev,cm){
 					
 					var confirm = mdDialog.confirm().title('Are you sure you want to delete?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () {
 					var promise=httpPreConfig({ method: 'POST', url: 'deleteStaticFabricationDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:cm  });
 					promise.then(function (response) {  
 						notification.notify("The entry has been deleted.");
 						BindData();
 					}, function(reason){ 
 						notification.notify("Delete Failed");
 					});
	        		},function(){});
 				}
 				
 				FabricationController.CopyData = function ($event,Data,form){
 					FabricationController.newItem(form);
 					$scope.LastCopied=angular.copy(Data);
 					$scope.Fabrication=angular.copy(Data);
 					
 				}
 				
 				FabricationController.closeForm = function(ev){
 					$scope.showTable=!$scope.showTable;
 				}
 	        	
 				
 	        }],
 	        controllerAs: 'FabricationController',
 	        link: function(scope, element, attrs, controllers) { },
 	        templateUrl : 'Authentication/View/Fabrication.html'
 	    };
 	}); 
   
  ScreenDirectives.directive('productStyle', function() {
 	  return {
 	        restrict : "E",
 	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification){
 	        	var ProductStyleController = this;
 	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
 	        	$scope.roleBasedRestriction =  window.localStorage.getItem("roleBasedRestriction");
 	        	$scope.showTable=true;
 				$scope.btnName="Save";
 				ProductStyleController.options ={"pageSelect":1}
 				ProductStyleController.query={limit:50,page:1}
 				$scope.listStyle = { height: (window.innerHeight - (200)) + 'px' };
				$scope.BodylistStyle = { height: (window.innerHeight - 250) + 'px' };
				
				window.addEventListener('resize', onResize);
				function onResize() {
					$scope.listStyle.height = (window.innerHeight - 210) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				window.addEventListener('resize', onBodyResize);
				function onBodyResize() {
					$scope.BodylistStyle.height = (window.innerHeight - 250) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
 				BindData()
 				function BindData(){
 					var promise=httpPreConfig({ method: 'GET', url: 'getStaticProductStyleDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
 					promise.then(function (response) { ProductStyleController.Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) } 
 					}, function(reason){ });
 				}
 				
 				
 				ProductStyleController.ViewData = function(ev,cm){
 					mdDialog.show({
 		                  clickOutsideToClose: true,
 		                  scope:$scope,
 		                  preserveScope: true,    
 		    		      fullscreen: 'md' ,       
 		                  templateUrl: 'viewDetails.html',
 		                  controller: function DialogController($scope, $mdDialog) {
 		                	  $scope.ProductStyle=angular.copy(cm);
 		                     $scope.closeDialog = function() { $mdDialog.hide(); }
 		                    
 		                     $scope.editDialog =function(ev,pm){ $mdDialog.hide(); ProductStyleController.EditData(ev,cm) }
 		                  }
 		               });
 				}
 				
 				
 				ProductStyleController.EditData= function(ev,cm){
 					$scope.showTable=false;
 					$scope.btnName="Update";
 					$scope.ProductStyle=angular.copy(cm);
 					$scope.ProductStyleForm.$setPristine();
 					$scope.ProductStyleForm.$setUntouched();
 				}
 				
 				ProductStyleController.clearAll = function($event,form){
 					
 					$scope.ProductStyle={};
 					ProductStyleController.newItem(form);
 				}
 				
 				ProductStyleController.newItem = function(form){
 					
 					$scope.ProductStyle={};
 					$scope.showTable=false;
 					$scope.btnName="Save";
 					form.$setPristine();
 					form.$setUntouched();
 				}
 				
 				  
 					 
 					 
 				
 				ProductStyleController.saveData = function(ev,form){
 					
 					if($scope.btnName == "Save"){
 						
 						if(angular.equals($scope.LastCopied,$scope.ProductStyle)){
 							notification.notify("Copied item Not Modified");
 						}
 						else{
 							var promise=httpPreConfig({ method: 'POST', url: 'insertStaticProductStyleDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.ProductStyle  });
 							promise.then(function (response) {  
 								$scope.btnName="Update";
 								notification.notify("The entry has been successfully added.");
 								BindData();
 							}, function(reason){ 
 								notification.notify("Save Failed");
 							});

 						}
 					}
 					else{
 						var promise=httpPreConfig({ method: 'POST', url: 'updateStaticProductStyleDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.ProductStyle  });
 						promise.then(function (response) {  
 							$scope.btnName="Update";
 							notification.notify("The changes have been updated.");
 							BindData();
 						}, function(reason){ 
 							notification.notify("Update Failed");
 						});
 					}
 					
 					form.$setPristine();
 					form.$setUntouched();
 					$scope.showTable=true;
 				}
 				
 				
 				ProductStyleController.RemoveData = function(ev,cm){
 					
 					var confirm = mdDialog.confirm().title('Are you sure you want to delete?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () {
 					var promise=httpPreConfig({ method: 'POST', url: 'deleteStaticProductStyleDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:cm  });
 					promise.then(function (response) {  
 						notification.notify("The entry has been deleted.");
 						BindData();
 					}, function(reason){ 
 						notification.notify("Delete Failed");
 					});
	        		},function(){});
 				}
 				
 				ProductStyleController.CopyData = function ($event,Data,form){
 					ProductStyleController.newItem(form);
 					$scope.LastCopied=angular.copy(Data);
 					$scope.ProductStyle=angular.copy(Data);
 					
 				}
 				
 				ProductStyleController.closeForm = function(ev){
 					$scope.showTable=!$scope.showTable;
 				}
 	        	
 				
 	        }],
 	        controllerAs: 'ProductStyleController',
 	        link: function(scope, element, attrs, controllers) { },
 	        templateUrl : 'Authentication/View/ProductStyle.html'
 	    };
 	}); 
   
  ScreenDirectives.directive('colorFamily', function() {
 	  return {
 	        restrict : "E",
 	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification){
 	        	var ColorFamilyController = this;
 	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
 	        	$scope.roleBasedRestriction =  window.localStorage.getItem("roleBasedRestriction");
 	        	$scope.showTable=true;
 				$scope.btnName="Save";
 				ColorFamilyController.options ={"pageSelect":1}
 				ColorFamilyController.query={limit:50,page:1}
 				$scope.listStyle = { height: (window.innerHeight - (200)) + 'px' };
				$scope.BodylistStyle = { height: (window.innerHeight - 250) + 'px' };
				
				window.addEventListener('resize', onResize);
				function onResize() {
					$scope.listStyle.height = (window.innerHeight - 210) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				window.addEventListener('resize', onBodyResize);
				function onBodyResize() {
					$scope.BodylistStyle.height = (window.innerHeight - 250) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				
 				BindData()
 				function BindData(){
 					var promise=httpPreConfig({ method: 'GET', url: 'getStaticColorfamilyDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
 					promise.then(function (response) { ColorFamilyController.Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) } 
 					}, function(reason){ });
 				}
 				
 				
 				ColorFamilyController.ViewData = function(ev,cm){
 					mdDialog.show({
 		                  clickOutsideToClose: true,
 		                  scope:$scope,
 		                  preserveScope: true,    
 		    		      fullscreen: 'md' ,       
 		                  templateUrl: 'viewDetails.html',
 		                  controller: function DialogController($scope, $mdDialog) {
 		                	  $scope.ColorFamily=angular.copy(cm);
 		                     $scope.closeDialog = function() { $mdDialog.hide(); }
 		                    
 		                     $scope.editDialog =function(ev,pm){ $mdDialog.hide(); ColorFamilyController.EditData(ev,cm) }
 		                  }
 		               });
 				}
 				
 				
 				ColorFamilyController.EditData= function(ev,cm){
 					$scope.showTable=false;
 					$scope.btnName="Update";
 					$scope.ColorFamily=angular.copy(cm);
 					$scope.ColorFamilyForm.$setPristine();
 					$scope.ColorFamilyForm.$setUntouched();
 				}
 				
 				ColorFamilyController.clearAll = function($event,form){
 					
 					$scope.ColorFamily={};
 					ColorFamilyController.newItem(form);
 				}
 				
 				ColorFamilyController.newItem = function(form){
 					
 					$scope.ColorFamily={};
 					$scope.showTable=false;
 					$scope.btnName="Save";
 					form.$setPristine();
 					form.$setUntouched();
 				}
 				
 					 
 					 
 					 
 					 

 				
 				ColorFamilyController.saveData = function(ev,form){
 					
 					if($scope.btnName == "Save"){
 						
 						if(angular.equals($scope.LastCopied,$scope.ColorFamily)){
 							notification.notify("Copied item Not Modified");
 						}
 						else{
 							var promise=httpPreConfig({ method: 'POST', url: 'insertStaticColorfamilyDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.ColorFamily  });
 							promise.then(function (response) {  
 								$scope.btnName="Update";
 								notification.notify("The entry has been successfully added.");
 								BindData();
 							}, function(reason){ 
 								notification.notify("Save Failed");
 							});

 						}
 					}
 					else{
 						var promise=httpPreConfig({ method: 'POST', url: 'updateStaticColorfamilyDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.ColorFamily  });
 						promise.then(function (response) {  
 							$scope.btnName="Update";
 							notification.notify("The changes have been updated.");
 							BindData();
 						}, function(reason){ 
 							notification.notify("Update Failed");
 						});
 					}
 					
 					form.$setPristine();
 					form.$setUntouched();
 					$scope.showTable=true;
 				}
 				
 				
 				ColorFamilyController.RemoveData = function(ev,cm){
 					
 					var confirm = mdDialog.confirm().title('Are you sure you want to delete?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () {
 					var promise=httpPreConfig({ method: 'POST', url: 'deleteStaticColorfamilyDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:cm  });
 					promise.then(function (response) {  
 						notification.notify("The entry has been deleted.");
 						BindData();
 					}, function(reason){ 
 						notification.notify("Delete Failed");
 					});
	        		},function(){});
 				}
 				
 				ColorFamilyController.CopyData = function ($event,Data,form){
 					ColorFamilyController.newItem(form);
 					$scope.LastCopied=angular.copy(Data);
 					$scope.ColorFamily=angular.copy(Data);
 					
 				}
 				
 				ColorFamilyController.closeForm = function(ev){
 					$scope.showTable=!$scope.showTable;
 				}
 	        	
 				
 	        }],
 	        controllerAs: 'ColorFamilyController',
 	        link: function(scope, element, attrs, controllers) { },
 	        templateUrl : 'Authentication/View/ColorFamily.html'
 	    };
 	}); 
   
  ScreenDirectives.directive('colorVariant', function() {
 	  return {
 	        restrict : "E",
 	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification){
 	        	var ColorVariantController = this;
 	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
 	        	$scope.roleBasedRestriction =  window.localStorage.getItem("roleBasedRestriction");
 	        	$scope.showTable=true;
 				$scope.btnName="Save";
 				ColorVariantController.options ={"pageSelect":1}
 				ColorVariantController.query={limit:50,page:1}
 				$scope.listStyle = { height: (window.innerHeight - (200)) + 'px' };
				$scope.BodylistStyle = { height: (window.innerHeight - 250) + 'px' };
				
				window.addEventListener('resize', onResize);
				function onResize() {
					$scope.listStyle.height = (window.innerHeight - 210) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				window.addEventListener('resize', onBodyResize);
				function onBodyResize() {
					$scope.BodylistStyle.height = (window.innerHeight - 250) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
 				BindData()
 				function BindData(){
 					var promise=httpPreConfig({ method: 'GET', url: 'getColourVarient', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
 					promise.then(function (response) { console.log(response); ColorVariantController.Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }
 					}, function(reason){ });
 					ColorFamilyBindData()
 				}
 				
 				
 				function ColorFamilyBindData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaticColorfamilyDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { ColorVariantController.ColorFamily_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }}, function(reason){ });
				}
 				
 				ColorVariantController.ViewData = function(ev,cm){
 					mdDialog.show({
 		                  clickOutsideToClose: true,
 		                  scope:$scope,
 		                  preserveScope: true,    
 		    		      fullscreen: 'md' ,       
 		                  templateUrl: 'viewDetails.html',
 		                  controller: function DialogController($scope, $mdDialog) {
 		                	  $scope.ColorVariant=angular.copy(cm);
 		                     $scope.closeDialog = function() { $mdDialog.hide(); }
 		                    
 		                     $scope.editDialog =function(ev,pm){ $mdDialog.hide(); ColorVariantController.EditData(ev,cm) }
 		                  }
 		               });
 				}
 				
 				
 				ColorVariantController.EditData= function(ev,cm){
 					$scope.showTable=false;
 					$scope.btnName="Update";
 					$scope.ColorVariant=angular.copy(cm);
 					$scope.ColorVariantForm.$setPristine();
 					$scope.ColorVariantForm.$setUntouched();
 				}
 				
 				ColorVariantController.clearAll = function($event,form){
 					
 					$scope.ColorVariant={};
 					ColorVariantController.newItem(form);
 				}
 				
 				ColorVariantController.newItem = function(form){
 					
 					$scope.ColorVariant={};
 					$scope.showTable=false;
 					$scope.btnName="Save";
 					form.$setPristine();
 					form.$setUntouched();
 				}
 				
 				
 				  
 			
 				ColorVariantController.saveData = function(ev,form){
 					
 					if($scope.btnName == "Save"){
 						
 						if(angular.equals($scope.LastCopied,$scope.ColorVariant)){
 							notification.notify("Copied item Not Modified");
 						}
 						else{
 							var promise=httpPreConfig({ method: 'POST', url: 'insertStaticColorvariantDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.ColorVariant  });
 							promise.then(function (response) {  
 								$scope.btnName="Update";
 								notification.notify("The entry has been successfully added.");
 								BindData();
 							}, function(reason){ 
 								notification.notify("Save Failed");
 							});

 						}
 					}
 					else{
 						var promise=httpPreConfig({ method: 'POST', url: 'updateStaticColorvariantDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.ColorVariant  });
 						promise.then(function (response) {  
 							$scope.btnName="Update";
 							notification.notify("The changes have been updated.");
 							BindData();
 						}, function(reason){ 
 							notification.notify("Update Failed");
 						});
 					}
 					
 					form.$setPristine();
 					form.$setUntouched();
 					$scope.showTable=true;
 				}
 				
 				
 				ColorVariantController.RemoveData = function(ev,cm){
 					
 					var confirm = mdDialog.confirm().title('Are you sure you want to delete?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () {
 					var promise=httpPreConfig({ method: 'POST', url: 'deleteStaticColorvariantDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:cm  });
 					promise.then(function (response) {  
 						notification.notify("The entry has been deleted.");
 						BindData();
 					}, function(reason){ 
 						notification.notify("Delete Failed");
 					});
	        		},function(){});
 				}
 				
 				ColorVariantController.CopyData = function ($event,Data,form){
 					ColorVariantController.newItem(form);
 					$scope.LastCopied=angular.copy(Data);
 					$scope.ColorVariant=angular.copy(Data);
 					
 				}
 				
 				ColorVariantController.closeForm = function(ev){
 					$scope.showTable=!$scope.showTable;
 				}
 	        	
 				
 	        }],
 	        controllerAs: 'ColorVariantController',
 	        link: function(scope, element, attrs, controllers) { },
 	        templateUrl : 'Authentication/View/ColorVariant.html'
 	    };
 	}); 
   
  ScreenDirectives.directive('shade', function() {
 	  return {
 	        restrict : "E",
 	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification){
 	        	var ShadeController = this;
 	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
 	        	$scope.roleBasedRestriction =  window.localStorage.getItem("roleBasedRestriction");
 	        	$scope.showTable=true;
 				$scope.btnName="Save";
 				ShadeController.options ={"pageSelect":1}
 				ShadeController.query={limit:50,page:1}
 				$scope.listStyle = { height: (window.innerHeight - (200)) + 'px' };
				$scope.BodylistStyle = { height: (window.innerHeight - 250) + 'px' };
				
				window.addEventListener('resize', onResize);
				function onResize() {
					$scope.listStyle.height = (window.innerHeight - 210) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				window.addEventListener('resize', onBodyResize);
				function onBodyResize() {
					$scope.BodylistStyle.height = (window.innerHeight - 250) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
 				BindData()
 				function BindData(){
 					var promise=httpPreConfig({ method: 'GET', url: 'getShade', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
 					promise.then(function (response) { console.log(response); ShadeController.Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) } 
 					}, function(reason){ });
 					ColourVarientBindData();
 				}
 				
 				function ColourVarientBindData(){
 					var promise=httpPreConfig({ method: 'GET', url: 'getColourVarient', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
 					promise.then(function (response) { console.log(response); ShadeController.ColorVariant_Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) }
 					}, function(reason){ });
 					
 				}
 				
 				ShadeController.ViewData = function(ev,cm){
 					mdDialog.show({
 		                  clickOutsideToClose: true,
 		                  scope:$scope,
 		                  preserveScope: true,    
 		    		      fullscreen: 'md' ,       
 		                  templateUrl: 'viewDetails.html',
 		                  controller: function DialogController($scope, $mdDialog) {
 		                	  $scope.Shade=angular.copy(cm);
 		                     $scope.closeDialog = function() { $mdDialog.hide(); }
 		                    
 		                     $scope.editDialog =function(ev,pm){ $mdDialog.hide(); ShadeController.EditData(ev,cm) }
 		                  }
 		               });
 				}
 				
 				
 				ShadeController.EditData= function(ev,cm){
 					$scope.showTable=false;
 					$scope.btnName="Update";
 					$scope.Shade=angular.copy(cm);
 					$scope.ShadeForm.$setPristine();
 					$scope.ShadeForm.$setUntouched();
 				}
 				
 				ShadeController.clearAll = function($event,form){
 					
 					$scope.Shade={};
 					ShadeController.newItem(form);
 				}
 				
 				ShadeController.newItem = function(form){
 					
 					$scope.Shade={};
 					$scope.showTable=false;
 					$scope.btnName="Save";
 					form.$setPristine();
 					form.$setUntouched();
 				}
 				
 				 
 				 
 				 
 				
 				ShadeController.saveData = function(ev,form){
 					
 					if($scope.btnName == "Save"){
 						
 						if(angular.equals($scope.LastCopied,$scope.Shade)){
 							notification.notify("Copied item Not Modified");
 						}
 						else{
 							var promise=httpPreConfig({ method: 'POST', url: 'insertStaticShadeDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.Shade  });
 							promise.then(function (response) {  
 								$scope.btnName="Update";
 								BindData();
 								notification.notify("The entry has been successfully added.");
 							}, function(reason){ 
 								notification.notify("Save Failed");
 							});

 						}
 					}
 					else{
 						var promise=httpPreConfig({ method: 'POST', url: 'updateStaticShadeDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.Shade  });
 						promise.then(function (response) {  
 							$scope.btnName="Update";
 							BindData();
 							notification.notify("The changes have been updated.");
 						}, function(reason){ 
 							notification.notify("Update Failed");
 						});
 					}
 					
 					form.$setPristine();
 					form.$setUntouched();
 					$scope.showTable=true;
 				}
 				
 				
 				ShadeController.RemoveData = function(ev,cm){
 					
 					var confirm = mdDialog.confirm().title('Are you sure you want to delete?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () {
 					var promise=httpPreConfig({ method: 'POST', url: 'deleteStaticShadeDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:cm  });
 					promise.then(function (response) {  
 						notification.notify("The entry has been deleted.");
 						BindData();
 					}, function(reason){ 
 						notification.notify("Delete Failed");
 					});
	        		},function(){});
 				}
 				
 				ShadeController.CopyData = function ($event,Data,form){
 					ShadeController.newItem(form);
 					$scope.LastCopied=angular.copy(Data);
 					$scope.Shade=angular.copy(Data);
 					
 				}
 				
 				ShadeController.closeForm = function(ev){
 					$scope.showTable=!$scope.showTable;
 				}
 	        	
 				
 	        }],
 	        controllerAs: 'ShadeController',
 	        link: function(scope, element, attrs, controllers) { },
 	        templateUrl : 'Authentication/View/Shade.html'
 	    };
 	}); 
  
  ScreenDirectives.directive('pattern', function() {
 	  return {
 	        restrict : "E",
 	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification){
 	        	var PatternController = this;
 	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
 	        	$scope.roleBasedRestriction =  window.localStorage.getItem("roleBasedRestriction");
 	        	$scope.showTable=true;
 				$scope.btnName="Save";
 				PatternController.options ={"pageSelect":1}
 				PatternController.query={limit:50,page:1}
 				$scope.listStyle = { height: (window.innerHeight - (200)) + 'px' };
				$scope.BodylistStyle = { height: (window.innerHeight - 250) + 'px' };
				
				window.addEventListener('resize', onResize);
				function onResize() {
					$scope.listStyle.height = (window.innerHeight - 210) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				window.addEventListener('resize', onBodyResize);
				function onBodyResize() {
					$scope.BodylistStyle.height = (window.innerHeight - 250) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
 				BindData()
 				function BindData(){
 					var promise=httpPreConfig({ method: 'GET', url: 'getStaticPatternDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
 					promise.then(function (response) { PatternController.Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) } 
 					}, function(reason){ });
 				}
 				
 				
 				PatternController.ViewData = function(ev,cm){
 					mdDialog.show({
 		                  clickOutsideToClose: true,
 		                  scope:$scope,
 		                  preserveScope: true,    
 		    		      fullscreen: 'md' ,       
 		                  templateUrl: 'viewDetails.html',
 		                  controller: function DialogController($scope, $mdDialog) {
 		                	  $scope.Pattern=angular.copy(cm);
 		                     $scope.closeDialog = function() { $mdDialog.hide(); }
 		                    
 		                     $scope.editDialog =function(ev,pm){ $mdDialog.hide(); PatternController.EditData(ev,cm) }
 		                  }
 		               });
 				}
 				
 				
 				PatternController.EditData= function(ev,cm){
 					$scope.showTable=false;
 					$scope.btnName="Update";
 					$scope.Pattern=angular.copy(cm);
 					$scope.PatternForm.$setPristine();
 					$scope.PatternForm.$setUntouched();
 				}
 				
 				PatternController.clearAll = function($event,form){
 					
 					$scope.Pattern={};
 					PatternController.newItem(form);
 				}
 				
 				PatternController.newItem = function(form){
 					
 					$scope.Pattern={};
 					$scope.showTable=false;
 					$scope.btnName="Save";
 					form.$setPristine();
 					form.$setUntouched();
 				}
 				
 				 
 				 
 				 
 				
 				
 				PatternController.saveData = function(ev,form){
 					
 					if($scope.btnName == "Save"){
 						
 						if(angular.equals($scope.LastCopied,$scope.Pattern)){
 							notification.notify("Copied item Not Modified");
 						}
 						else{
 							var promise=httpPreConfig({ method: 'POST', url: 'insertStaticPatternDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.Pattern  });
 							promise.then(function (response) {  
 								$scope.btnName="Update";
 								notification.notify("The entry has been successfully added.");
 								BindData();
 							}, function(reason){ 
 								notification.notify("Save Failed");
 							});

 						}
 					}
 					else{
 						var promise=httpPreConfig({ method: 'POST', url: 'updateStaticPatternDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.Pattern  });
 						promise.then(function (response) {  
 							$scope.btnName="Update";
 							notification.notify("The changes have been updated.");
 							BindData();
 						}, function(reason){ 
 							notification.notify("Update Failed");
 						});
 					}
 					
 					form.$setPristine();
 					form.$setUntouched();
 					$scope.showTable=true;
 				}
 				
 				
 				PatternController.RemoveData = function(ev,cm){
 					
 					var confirm = mdDialog.confirm().title('Are you sure you want to delete?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () {
 					var promise=httpPreConfig({ method: 'POST', url: 'deleteStaticPatternDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:cm  });
 					promise.then(function (response) {  
 						notification.notify("The entry has been deleted.");
 						BindData();
 					}, function(reason){ 
 						notification.notify("Delete Failed");
 					});
	        		},function(){});
 				}
 				
 				PatternController.CopyData = function ($event,Data,form){
 					PatternController.newItem(form);
 					$scope.LastCopied=angular.copy(Data);
 					$scope.Pattern=angular.copy(Data);
 					
 				}
 				
 				PatternController.closeForm = function(ev){
 					$scope.showTable=!$scope.showTable;
 				}
 	        	
 				
 	        }],
 	        controllerAs: 'PatternController',
 	        link: function(scope, element, attrs, controllers) { },
 	        templateUrl : 'Authentication/View/Pattern.html'
 	    };
 	}); 
   
  ScreenDirectives.directive('scale', function() {
 	  return {
 	        restrict : "E",
 	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification){
 	        	var ScaleController = this;
 	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
 	        	$scope.roleBasedRestriction =  window.localStorage.getItem("roleBasedRestriction");
 	        	$scope.showTable=true;
 				$scope.btnName="Save";
 				ScaleController.options ={"pageSelect":1}
 				ScaleController.query={limit:50,page:1}
 				$scope.listStyle = { height: (window.innerHeight - (200)) + 'px' };
				$scope.BodylistStyle = { height: (window.innerHeight - 250) + 'px' };
				
				window.addEventListener('resize', onResize);
				function onResize() {
					$scope.listStyle.height = (window.innerHeight - 210) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				window.addEventListener('resize', onBodyResize);
				function onBodyResize() {
					$scope.BodylistStyle.height = (window.innerHeight - 250) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
 				BindData()
 				function BindData(){
 					var promise=httpPreConfig({ method: 'GET', url: 'getStaticScaleDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
 					promise.then(function (response) { ScaleController.Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) } 
 					}, function(reason){ });
 				}
 				
 				
 				ScaleController.ViewData = function(ev,cm){
 					mdDialog.show({
 		                  clickOutsideToClose: true,
 		                  scope:$scope,
 		                  preserveScope: true,    
 		    		      fullscreen: 'md' ,       
 		                  templateUrl: 'viewDetails.html',
 		                  controller: function DialogController($scope, $mdDialog) {
 		                	  $scope.Scale=angular.copy(cm);
 		                     $scope.closeDialog = function() { $mdDialog.hide(); }
 		                    
 		                     $scope.editDialog =function(ev,pm){ $mdDialog.hide(); ScaleController.EditData(ev,cm) }
 		                  }
 		               });
 				}
 				
 				
 				ScaleController.EditData= function(ev,cm){
 					$scope.showTable=false;
 					$scope.btnName="Update";
 					$scope.Scale=angular.copy(cm);
 					$scope.ScaleForm.$setPristine();
 					$scope.ScaleForm.$setUntouched();
 				}
 				
 				ScaleController.clearAll = function($event,form){
 					
 					$scope.Scale={};
 					ScaleController.newItem(form);
 				}
 				
 				ScaleController.newItem = function(form){
 					
 					$scope.Scale={};
 					$scope.showTable=false;
 					$scope.btnName="Save";
 					form.$setPristine();
 					form.$setUntouched();
 				}
 				
 				  
 					 
 					 
 				  
 					 
 					 
 				  
 					 
 					 
 					 

 				
 				ScaleController.saveData = function(ev,form){
 					
 					if($scope.btnName == "Save"){
 						
 						if(angular.equals($scope.LastCopied,$scope.Scale)){
 							notification.notify("Copied item Not Modified");
 						}
 						else{
 							var promise=httpPreConfig({ method: 'POST', url: 'insertStaticScaleDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.Scale  });
 							promise.then(function (response) {  
 								$scope.btnName="Update";
 								notification.notify("The entry has been successfully added.");
 								BindData();
 							}, function(reason){ 
 								notification.notify("Save Failed");
 							});

 						}
 					}
 					else{
 						var promise=httpPreConfig({ method: 'POST', url: 'updateStaticScaleDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.Scale  });
 						promise.then(function (response) {  
 							$scope.btnName="Update";
 							notification.notify("The changes have been updated.");
 							BindData();
 						}, function(reason){ 
 							notification.notify("Update Failed");
 						});
 					}
 					form.$setPristine();
 					form.$setUntouched();
 					$scope.showTable=true;
 				}
 				
 				
 				ScaleController.RemoveData = function(ev,cm){
 					
 					var confirm = mdDialog.confirm().title('Are you sure you want to delete?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () {
 					var promise=httpPreConfig({ method: 'POST', url: 'deleteStaticScaleDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:cm  });
 					promise.then(function (response) {  
 						notification.notify("The entry has been deleted.");
 						BindData();
 					}, function(reason){ 
 						notification.notify("Delete Failed");
 					});
	        		},function(){});
 				}
 				
 				ScaleController.CopyData = function ($event,Data,form){
 					ScaleController.newItem(form);
 					$scope.LastCopied=angular.copy(Data);
 					$scope.Scale=angular.copy(Data);
 					
 				}
 				
 				ScaleController.closeForm = function(ev){
 					$scope.showTable=!$scope.showTable;
 				}
 	        	
 				
 	        }],
 	        controllerAs: 'ScaleController',
 	        link: function(scope, element, attrs, controllers) { },
 	        templateUrl : 'Authentication/View/Scale.html'
 	    };
 	}); 
   
  ScreenDirectives.directive('noSession', function() {
 	  return {
 	        restrict : "E",
 	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification){
 	        	var NoSessionController = this;
 	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
 	        	$scope.roleBasedRestriction =  window.localStorage.getItem("roleBasedRestriction");
 	        	$scope.showTable=true;
 				$scope.btnName="Save";
 				NoSessionController.options ={"pageSelect":1}
 				NoSessionController.query={limit:50,page:1}
 				$scope.listStyle = { height: (window.innerHeight - (200)) + 'px' };
				$scope.BodylistStyle = { height: (window.innerHeight - 250) + 'px' };
				
				window.addEventListener('resize', onResize);
				function onResize() {
					$scope.listStyle.height = (window.innerHeight - 210) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				window.addEventListener('resize', onBodyResize);
				function onBodyResize() {
					$scope.BodylistStyle.height = (window.innerHeight - 250) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
 				BindData()
 				function BindData(){
 					var promise=httpPreConfig({ method: 'GET', url: 'getStaticNoseasonDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
 					promise.then(function (response) { NoSessionController.Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) } 
 					}, function(reason){ });
 				}
 				
 				
 				NoSessionController.ViewData = function(ev,cm){
 					mdDialog.show({
 		                  clickOutsideToClose: true,
 		                  scope:$scope,
 		                  preserveScope: true,    
 		    		      fullscreen: 'md' ,       
 		                  templateUrl: 'viewDetails.html',
 		                  controller: function DialogController($scope, $mdDialog) {
 		                	  $scope.NoSession=angular.copy(cm);
 		                     $scope.closeDialog = function() { $mdDialog.hide(); }
 		                    
 		                     $scope.editDialog =function(ev,pm){ $mdDialog.hide(); NoSessionController.EditData(ev,cm) }
 		                  }
 		               });
 				}
 				
 				
 				NoSessionController.EditData= function(ev,cm){
 					$scope.showTable=false;
 					$scope.btnName="Update";
 					$scope.NoSession=angular.copy(cm);
 					$scope.NoSessionForm.$setPristine();
 					$scope.NoSessionForm.$setUntouched();
 				}
 				
 				NoSessionController.clearAll = function($event,form){
 					
 					$scope.NoSession={};
 					NoSessionController.newItem(form);
 				}
 				
 				NoSessionController.newItem = function(form){
 					
 					$scope.NoSession={};
 					$scope.showTable=false;
 					$scope.btnName="Save";
 					form.$setPristine();
 					form.$setUntouched();
 				}
 				
 			NoSessionController.saveData = function(ev,form){
 					
 					if($scope.btnName == "Save"){
 						
 						if(angular.equals($scope.LastCopied,$scope.NoSession)){
 							notification.notify("Copied item Not Modified");
 						}
 						else{
 							var promise=httpPreConfig({ method: 'POST', url: 'insertStaticNoseasonDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.NoSession  });
 							promise.then(function (response) {  
 								$scope.btnName="Update";
 								notification.notify("The entry has been successfully added.");
 								BindData();
 							}, function(reason){ 
 								notification.notify("Save Failed");
 							});

 						}
 					}
 					else{
 						var promise=httpPreConfig({ method: 'POST', url: 'updateStaticNoseasonDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.NoSession  });
 						promise.then(function (response) {  
 							$scope.btnName="Update";
 							notification.notify("The changes have been updated.");
 							BindData();
 						}, function(reason){ 
 							notification.notify("Update Failed");
 						});
 					}
 					
 					form.$setPristine();
 					form.$setUntouched();
 					$scope.showTable=true;
 				}
 				
 				
 				NoSessionController.RemoveData = function(ev,cm){
 					
 					var confirm = mdDialog.confirm().title('Are you sure you want to delete?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () {
 					var promise=httpPreConfig({ method: 'POST', url: 'deleteStaticNoseasonDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:cm  });
 					promise.then(function (response) {  
 						notification.notify("The entry has been deleted.");
 						BindData();
 					}, function(reason){ 
 						notification.notify("Delete Failed");
 					});
	        		},function(){});
 				}
 				
 				NoSessionController.CopyData = function ($event,Data,form){
 					NoSessionController.newItem(form);
 					$scope.LastCopied=angular.copy(Data);
 					$scope.NoSession=angular.copy(Data);
 					
 				}
 				
 				NoSessionController.closeForm = function(ev){
 					$scope.showTable=!$scope.showTable;
 				}
 	        	
 				
 	        }],
 	        controllerAs: 'NoSessionController',
 	        link: function(scope, element, attrs, controllers) { },
 	        templateUrl : 'Authentication/View/NoSession.html'
 	    };
 	}); 
   
  ScreenDirectives.directive('session', function() {
 	  return {
 	        restrict : "E",
 	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification){
 	        	var SessionController = this;
 	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
 	        	$scope.roleBasedRestriction =  window.localStorage.getItem("roleBasedRestriction");
 	        	$scope.showTable=true;
 				$scope.btnName="Save";
 				SessionController.options ={"pageSelect":1}
 				SessionController.query={limit:50,page:1}
 				$scope.listStyle = { height: (window.innerHeight - (200)) + 'px' };
				$scope.BodylistStyle = { height: (window.innerHeight - 250) + 'px' };
				
				window.addEventListener('resize', onResize);
				function onResize() {
					$scope.listStyle.height = (window.innerHeight - 210) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				window.addEventListener('resize', onBodyResize);
				function onBodyResize() {
					$scope.BodylistStyle.height = (window.innerHeight - 250) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
 				BindData()
 				function BindData(){
 					var promise=httpPreConfig({ method: 'GET', url: 'getStaticSeasonDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
 					promise.then(function (response) { SessionController.Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) } 
 					}, function(reason){ });
 				}
 				
 				
 				SessionController.ViewData = function(ev,cm){
 					mdDialog.show({
 		                  clickOutsideToClose: true,
 		                  scope:$scope,
 		                  preserveScope: true,    
 		    		      fullscreen: 'md' ,       
 		                  templateUrl: 'viewDetails.html',
 		                  controller: function DialogController($scope, $mdDialog) {
 		                	  $scope.Session=angular.copy(cm);
 		                     $scope.closeDialog = function() { $mdDialog.hide(); }
 		                    
 		                     $scope.editDialog =function(ev,pm){ $mdDialog.hide(); SessionController.EditData(ev,cm) }
 		                  }
 		               });
 				}
 				
 				
 				SessionController.EditData= function(ev,cm){
 					$scope.showTable=false;
 					$scope.btnName="Update";
 					$scope.Session=angular.copy(cm);
 					$scope.SessionForm.$setPristine();
 					$scope.SessionForm.$setUntouched();
 				}
 				
 				SessionController.clearAll = function($event,form){
 					
 					$scope.Session={};
 					SessionController.newItem(form);
 				}
 				
 				SessionController.newItem = function(form){
 					
 					$scope.Session={};
 					$scope.showTable=false;
 					$scope.btnName="Save";
 					form.$setPristine();
 					form.$setUntouched();
 				}
 				
 			
 				SessionController.saveData = function(ev,form){
 					
 					if($scope.btnName == "Save"){
 						
 						if(angular.equals($scope.LastCopied,$scope.Session)){
 							notification.notify("Copied item Not Modified");
 						}
 						else{
 							var promise=httpPreConfig({ method: 'POST', url: 'insertStaticSeasonDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.Session  });
 							promise.then(function (response) {  
 								$scope.btnName="Update";
 								notification.notify("The entry has been successfully added.");
 								BindData();
 							}, function(reason){ 
 								notification.notify("Save Failed");
 							});

 						}
 					}
 					else{
 						var promise=httpPreConfig({ method: 'POST', url: 'updateStaticSeasonDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.Session  });
 						promise.then(function (response) {  
 							$scope.btnName="Update";
 							notification.notify("The changes have been updated.");
 							BindData();
 						}, function(reason){ 
 							notification.notify("Update Failed");
 						});
 					}
 					
 					form.$setPristine();
 					form.$setUntouched();
 					$scope.showTable=true;
 				}
 				
 				
 				SessionController.RemoveData = function(ev,cm){
 					
 					var confirm = mdDialog.confirm().title('Are you sure you want to delete?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () {
 					var promise=httpPreConfig({ method: 'POST', url: 'deleteStaticSeasonDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:cm  });
 					promise.then(function (response) {  
 						notification.notify("The entry has been deleted.");
 						BindData();
 					}, function(reason){ 
 						notification.notify("Delete Failed");
 					});
	        		},function(){});
 				}
 				
 				SessionController.CopyData = function ($event,Data,form){
 					SessionController.newItem(form);
 					$scope.LastCopied=angular.copy(Data);
 					$scope.Session=angular.copy(Data);
 					
 				}
 				
 				SessionController.closeForm = function(ev){
 					$scope.showTable=!$scope.showTable;
 				}
 	        	
 				
 	        }],
 	        controllerAs: 'SessionController',
 	        link: function(scope, element, attrs, controllers) { },
 	        templateUrl : 'Authentication/View/Session.html'
 	    };
 	}); 
   
  ScreenDirectives.directive('collection', function() {
 	  return {
 	        restrict : "E",
 	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification){
 	        	var CollectionController = this;
 	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
 	        	$scope.roleBasedRestriction =  window.localStorage.getItem("roleBasedRestriction");
 	        	$scope.showTable=true;
 				$scope.btnName="Save";
 				CollectionController.options ={"pageSelect":1}
 				CollectionController.query={limit:50,page:1}
 				$scope.listStyle = { height: (window.innerHeight - (200)) + 'px' };
				$scope.BodylistStyle = { height: (window.innerHeight - 250) + 'px' };
				
				window.addEventListener('resize', onResize);
				function onResize() {
					$scope.listStyle.height = (window.innerHeight - 210) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				window.addEventListener('resize', onBodyResize);
				function onBodyResize() {
					$scope.BodylistStyle.height = (window.innerHeight - 250) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
 				BindData()
 				function BindData(){
 					var promise=httpPreConfig({ method: 'GET', url: 'getStaticCollectionDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
 					promise.then(function (response) { CollectionController.Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) } 
 					}, function(reason){ });
 				}
 				
 				
 				CollectionController.ViewData = function(ev,cm){
 					mdDialog.show({
 		                  clickOutsideToClose: true,
 		                  scope:$scope,
 		                  preserveScope: true,    
 		    		      fullscreen: 'md' ,       
 		                  templateUrl: 'viewDetails.html',
 		                  controller: function DialogController($scope, $mdDialog) {
 		                	  $scope.Collection=angular.copy(cm);
 		                     $scope.closeDialog = function() { $mdDialog.hide(); }
 		                    
 		                     $scope.editDialog =function(ev,pm){ $mdDialog.hide(); CollectionController.EditData(ev,cm) }
 		                  }
 		               });
 				}
 				
 				
 				CollectionController.EditData= function(ev,cm){
 					$scope.showTable=false;
 					$scope.btnName="Update";
 					$scope.Collection=angular.copy(cm);
 					$scope.CollectionForm.$setPristine();
 					$scope.CollectionForm.$setUntouched();
 				}
 				
 				CollectionController.clearAll = function($event,form){
 					
 					$scope.Collection={};
 					CollectionController.newItem(form);
 				}
 				
 				CollectionController.newItem = function(form){
 					
 					$scope.Collection={};
 					$scope.showTable=false;
 					$scope.btnName="Save";
 					form.$setPristine();
 					form.$setUntouched();
 				}
 				
 				 
 				 
 				 
 				
 				CollectionController.saveData = function(ev,form){
 					
 					if($scope.btnName == "Save"){
 						
 						if(angular.equals($scope.LastCopied,$scope.Collection)){
 							notification.notify("Copied item Not Modified");
 						}
 						else{
 							var promise=httpPreConfig({ method: 'POST', url: 'insertStaticCollectionDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.Collection  });
 							promise.then(function (response) {  
 								$scope.btnName="Update";
 								notification.notify("The entry has been successfully added.");
 								BindData();
 							}, function(reason){ 
 								notification.notify("Save Failed");
 							});

 						}
 					}
 					else{
 						var promise=httpPreConfig({ method: 'POST', url: 'updateStaticCollectionDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.Collection  });
 						promise.then(function (response) {  
 							$scope.btnName="Update";
 							notification.notify("The changes have been updated.");
 							BindData();
 						}, function(reason){ 
 							notification.notify("Update Failed");
 						});
 					}
 					
 					form.$setPristine();
 					form.$setUntouched();
 					$scope.showTable=true;
 				}
 				
 				
 				CollectionController.RemoveData = function(ev,cm){
 					
 					var confirm = mdDialog.confirm().title('Are you sure you want to delete?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () {
 					var promise=httpPreConfig({ method: 'POST', url: 'deleteStaticCollectionDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:cm  });
 					promise.then(function (response) {  
 						notification.notify("The entry has been deleted.");
 						BindData();
 					}, function(reason){ 
 						notification.notify("Delete Failed");
 					});
	        		},function(){});
 				}
 				
 				CollectionController.CopyData = function ($event,Data,form){
 					CollectionController.newItem(form);
 					$scope.LastCopied=angular.copy(Data);
 					$scope.Collection=angular.copy(Data);
 					
 				}
 				
 				CollectionController.closeForm = function(ev){
 					$scope.showTable=!$scope.showTable;
 				}
 	        	
 				
 	        }],
 	        controllerAs: 'CollectionController',
 	        link: function(scope, element, attrs, controllers) { },
 	        templateUrl : 'Authentication/View/Collection.html'
 	    };
 	}); 
   
  ScreenDirectives.directive('collar', function() {
 	  return {
 	        restrict : "E",
 	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification){
 	        	var CollarController = this;
 	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
 	        	$scope.roleBasedRestriction =  window.localStorage.getItem("roleBasedRestriction");
 	        	$scope.showTable=true;
 				$scope.btnName="Save";
 				CollarController.options ={"pageSelect":1}
 				CollarController.query={limit:50,page:1}
 				$scope.listStyle = { height: (window.innerHeight - (200)) + 'px' };
				$scope.BodylistStyle = { height: (window.innerHeight - 250) + 'px' };
 				
				window.addEventListener('resize', onResize);
				function onResize() {
					$scope.listStyle.height = (window.innerHeight - 210) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				window.addEventListener('resize', onBodyResize);
				function onBodyResize() {
					$scope.BodylistStyle.height = (window.innerHeight - 250) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
 				BindData()
 				function BindData(){
 					var promise=httpPreConfig({ method: 'GET', url: 'getStaticCollarDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
 					promise.then(function (response) { CollarController.Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) } 
 					}, function(reason){ });
 				}
 				
 				
 				CollarController.ViewData = function(ev,cm){
 					mdDialog.show({
 		                  clickOutsideToClose: true,
 		                  scope:$scope,
 		                  preserveScope: true,    
 		    		      fullscreen: 'md' ,       
 		                  templateUrl: 'viewDetails.html',
 		                  controller: function DialogController($scope, $mdDialog) {
 		                	  $scope.Collar=angular.copy(cm);
 		                     $scope.closeDialog = function() { $mdDialog.hide(); }
 		                    
 		                     $scope.editDialog =function(ev,cm){ 
 		                    	/* mdDialog.hide(); */
 		                    	 CollarController.EditData(ev,cm);
 		                    	/* $scope.CollarForm.$setPristine();
 		                    	 $scope.CollarForm.$setUntouched();*/
 		                     }
 		                  }
 		               });
 				}
 				
 				
 				CollarController.EditData= function(ev,cm){
 					mdDialog.hide(); 
 					$scope.showTable=false;
 					$scope.btnName="Update";
 					$scope.Collar=angular.copy(cm);
 					$scope.CollarForm.$setPristine();
 					$scope.CollarForm.$setUntouched();
 				}
 				
 				CollarController.clearAll = function($event,form){
 					
 					$scope.Collar={};
 					CollarController.newItem(form);
 				}
 				
 				CollarController.newItem = function(form){
 					
 					$scope.Collar={};
 					$scope.showTable=false;
 					$scope.btnName="Save";
 					form.$setPristine();
 					form.$setUntouched();
 				}
 				
 				
 				 
 				 
 				 
 				
 				CollarController.saveData = function(ev,form){
 					
 					if($scope.btnName == "Save"){
 						
 						if(angular.equals($scope.LastCopied,$scope.Collar)){
 							notification.notify("Copied item Not Modified");
 						}
 						else{
 							var promise=httpPreConfig({ method: 'POST', url: 'insertStaticCollarDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.Collar  });
 							promise.then(function (response) {  
 								$scope.btnName="Update";
 								notification.notify("The entry has been successfully added.");
 								BindData();
 							}, function(reason){ 
 								notification.notify("Save Failed");
 							});

 						}
 					}
 					else{
 						var promise=httpPreConfig({ method: 'POST', url: 'updateStaticCollarDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.Collar  });
 						promise.then(function (response) {  
 							$scope.btnName="Update";
 							notification.notify("The changes have been updated.");
 							BindData();
 						}, function(reason){ 
 							notification.notify("Update Failed");
 						});
 					}
 					
 					form.$setPristine();
 					form.$setUntouched();
 					$scope.showTable=true;
 				}
 				
 				
 				CollarController.RemoveData = function(ev,cm){
 					
 					var confirm = mdDialog.confirm().title('Are you sure you want to delete?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () {
 					var promise=httpPreConfig({ method: 'POST', url: 'deleteStaticCollarDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:cm  });
 					promise.then(function (response) {  
 						notification.notify("The entry has been deleted.");
 						BindData();
 					}, function(reason){ 
 						notification.notify("Delete Failed");
 					});
	        		},function(){});
 				}
 				
 				CollarController.CopyData = function ($event,Data,form){
 					CollarController.newItem(form);
 					$scope.LastCopied=angular.copy(Data);
 					$scope.Collar=angular.copy(Data);
 					
 				}
 				
 				CollarController.closeForm = function(ev){
 					$scope.showTable=!$scope.showTable;
 				}
 	        	
 				
 	        }],
 	        controllerAs: 'CollarController',
 	        link: function(scope, element, attrs, controllers) { },
 	        templateUrl : 'Authentication/View/Collar.html'
 	    };
 	}); 
   
  ScreenDirectives.directive('bottomRise', function() {
 	  return {
 	        restrict : "E",
 	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification){
 	        	var BottomRiseController = this;
 	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
 	        	$scope.roleBasedRestriction =  window.localStorage.getItem("roleBasedRestriction");
 	        	$scope.showTable=true;
 				$scope.btnName="Save";
 				BottomRiseController.options ={"pageSelect":1}
 				BottomRiseController.query={limit:50,page:1}
 				$scope.listStyle = { height: (window.innerHeight - (200)) + 'px' };
				$scope.BodylistStyle = { height: (window.innerHeight - 250) + 'px' };
 				
				window.addEventListener('resize', onResize);
				function onResize() {
					$scope.listStyle.height = (window.innerHeight - 210) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				window.addEventListener('resize', onBodyResize);
				function onBodyResize() {
					$scope.BodylistStyle.height = (window.innerHeight - 250) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
 				BindData()
 				function BindData(){
 					var promise=httpPreConfig({ method: 'GET', url: 'getStaticBottomriseDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
 					promise.then(function (response) { BottomRiseController.Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) } 
 					}, function(reason){ });
 				}
 				
 				
 				BottomRiseController.ViewData = function(ev,cm){
 					mdDialog.show({
 		                  clickOutsideToClose: true,
 		                  scope:$scope,
 		                  preserveScope: true,    
 		    		      fullscreen: 'md' ,       
 		                  templateUrl: 'viewDetails.html',
 		                  controller: function DialogController($scope, $mdDialog) {
 		                	  $scope.BottomRise=angular.copy(cm);
 		                     $scope.closeDialog = function() { $mdDialog.hide(); }
 		                    
 		                     $scope.editDialog =function(ev,cm){ 
 		                    	 $mdDialog.hide(); 
	 		                     BottomRiseController.EditData(ev,cm); 
	 		                    
 		 					}
 		                  }
 		               });
 				}
 				
 				
 				BottomRiseController.EditData= function(ev,cm){
 					mdDialog.hide();
 					
 					$scope.showTable=false;
 					$scope.btnName="Update";
 					$scope.BottomRise=angular.copy(cm);
 					/*$scope.BottomRiseForm.$setPristine();
 					$scope.BottomRiseForm.$setUntouched();*/
 				}
 				
 				BottomRiseController.clearAll = function($event,form){
 					
 					$scope.BottomRise={};
 					BottomRiseController.newItem(form);
 				}
 				
 				BottomRiseController.newItem = function(form){
 					
 					$scope.BottomRise={};
 					$scope.showTable=false;
 					$scope.btnName="Save";
 					form.$setPristine();
 					form.$setUntouched();
 				}
 				
 				 
 				 
 				 
 				BottomRiseController.saveData = function(ev,form){
 					
 					if($scope.btnName == "Save"){
 						
 						if(angular.equals($scope.LastCopied,$scope.BottomRise)){
 							notification.notify("Copied item Not Modified");
 						}
 						else{
 							var promise=httpPreConfig({ method: 'POST', url: 'insertStaticBottomriseDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.BottomRise  });
 							promise.then(function (response) {  
 								$scope.btnName="Update";
 								notification.notify("The entry has been successfully added.");
 								BindData();
 							}, function(reason){ 
 								notification.notify("Save Failed");
 							});

 						}
 					}
 					else{
 						var promise=httpPreConfig({ method: 'POST', url: 'updateStaticBottomriseDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.BottomRise  });
 						promise.then(function (response) {  
 							$scope.btnName="Update";
 							notification.notify("The changes have been updated.");
 							BindData();
 						}, function(reason){ 
 							notification.notify("Update Failed");
 						});
 					}
 					BindData();
 					form.$setPristine();
 					form.$setUntouched();
 					$scope.showTable=true;
 				}
 				
 				
 				BottomRiseController.RemoveData = function(ev,cm){
 					
 					var confirm = mdDialog.confirm().title('Are you sure you want to delete?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () {
 					var promise=httpPreConfig({ method: 'POST', url: 'deleteStaticBottomriseDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:cm  });
 					promise.then(function (response) {  
 						notification.notify("The entry has been deleted.");
 						BindData();
 					}, function(reason){ 
 						notification.notify("Delete Failed");
 					});
	        		},function(){});
 				}
 				
 				BottomRiseController.CopyData = function ($event,Data,form){
 					BottomRiseController.newItem(form);
 					$scope.LastCopied=angular.copy(Data);
 					$scope.BottomRise=angular.copy(Data);
 					
 				}
 				
 				BottomRiseController.closeForm = function(ev){
 					$scope.showTable=!$scope.showTable;
 				}
 	        	
 				
 	        }],
 	        controllerAs: 'BottomRiseController',
 	        link: function(scope, element, attrs, controllers) { },
 	        templateUrl : 'Authentication/View/BottomRise.html'
 	    };
 	}); 
   
  ScreenDirectives.directive('fashionPyramid', function() {
 	  return {
 	        restrict : "E",
 	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification){
 	        	var FashionPyramidController = this;
 	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
 	        	$scope.roleBasedRestriction =  window.localStorage.getItem("roleBasedRestriction");
 	        	$scope.showTable=true;
 				$scope.btnName="Save";
 				FashionPyramidController.options ={"pageSelect":1}
 				FashionPyramidController.query={limit:50,page:1}
 				
 				$scope.listStyle = { height: (window.innerHeight - (200)) + 'px' };
				$scope.BodylistStyle = { height: (window.innerHeight - 250) + 'px' };
 				
				window.addEventListener('resize', onResize);
				function onResize() {
					$scope.listStyle.height = (window.innerHeight - 210) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				window.addEventListener('resize', onBodyResize);
				function onBodyResize() {
					$scope.BodylistStyle.height = (window.innerHeight - 250) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
 				BindData()
 				function BindData(){
 					var promise=httpPreConfig({ method: 'GET', url: 'getStaticFashionPyramidDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
 					promise.then(function (response) { FashionPyramidController.Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) } 
 					}, function(reason){ });
 				}
 				
 				
 				FashionPyramidController.ViewData = function(ev,cm){
 					mdDialog.show({
 		                  clickOutsideToClose: true,
 		                  scope:$scope,
 		                  preserveScope: true,    
 		    		      fullscreen: 'md' ,       
 		                  templateUrl: 'viewDetails.html',
 		                  controller: function DialogController($scope, $mdDialog) {
 		                	  $scope.FashionPyramid=angular.copy(cm);
 		                     $scope.closeDialog = function() { $mdDialog.hide(); }
 		                    
 		                     $scope.editDialog =function(ev,pm){ $mdDialog.hide(); FashionPyramidController.EditData(ev,cm) }
 		                  }
 		               });
 				}
 				
 				
 				FashionPyramidController.EditData= function(ev,cm){
 					$scope.showTable=false;
 					$scope.btnName="Update";
 					$scope.FashionPyramid=angular.copy(cm);
 					$scope.FashionPyramidForm.$setPristine();
 					$scope.FashionPyramidForm.$setUntouched();
 				}
 				
 				FashionPyramidController.clearAll = function($event,form){
 					
 					$scope.FashionPyramid={};
 					FashionPyramidController.newItem(form);
 				}
 				
 				FashionPyramidController.newItem = function(form){
 					
 					$scope.FashionPyramid={};
 					$scope.showTable=false;
 					$scope.btnName="Save";
 					form.$setPristine();
 					form.$setUntouched();
 				}
 				
 				
 					 
 				
 				FashionPyramidController.saveData = function(ev,form){
 					
 					if($scope.btnName == "Save"){
 						
 						if(angular.equals($scope.LastCopied,$scope.FashionPyramid)){
 							notification.notify("Copied item Not Modified");
 						}
 						else{
 							var promise=httpPreConfig({ method: 'POST', url: 'insertStaticFashionPyramidDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.FashionPyramid  });
 							promise.then(function (response) {  
 								$scope.btnName="Update";
 								notification.notify("The entry has been successfully added.");
 								BindData();
 							}, function(reason){ 
 								notification.notify("Save Failed");
 							});

 						}
 					}
 					else{
 						var promise=httpPreConfig({ method: 'POST', url: 'updateStaticFashionPyramidDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.FashionPyramid  });
 						promise.then(function (response) {  
 							$scope.btnName="Update";
 							notification.notify("The changes have been updated.");
 							BindData();
 						}, function(reason){ 
 							notification.notify("Update Failed");
 						});
 					}
 					
 					form.$setPristine();
 					form.$setUntouched();
 					$scope.showTable=true;
 				}
 				
 				
 				FashionPyramidController.RemoveData = function(ev,cm){
 					
 					var confirm = mdDialog.confirm().title('Are you sure you want to delete?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () {
 					var promise=httpPreConfig({ method: 'POST', url: 'deleteStaticFashionPyramidDetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:cm  });
 					promise.then(function (response) {  
 						notification.notify("The entry has been deleted.");
 						BindData();
 					}, function(reason){ 
 						notification.notify("Delete Failed");
 					});
	        		},function(){});
 				}
 				
 				FashionPyramidController.CopyData = function ($event,Data,form){
 					FashionPyramidController.newItem(form);
 					$scope.LastCopied=angular.copy(Data);
 					$scope.FashionPyramid=angular.copy(Data);
 					
 				}
 				
 				FashionPyramidController.closeForm = function(ev){
 					$scope.showTable=!$scope.showTable;
 				}
 	        	
 				
 	        }],
 	        controllerAs: 'FashionPyramidController',
 	        link: function(scope, element, attrs, controllers) { },
 	        templateUrl : 'Authentication/View/FashionPyramid.html'
 	    };
 	}); 
   
  
  ScreenDirectives.directive('size', function() {
 	  return {
 	        restrict : "E",
 	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification){
 	        	var SizeController = this;
 	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
 	        	$scope.roleBasedRestriction =  window.localStorage.getItem("roleBasedRestriction");
 	        	$scope.showTable=true;
 				$scope.btnName="Save";
 				SizeController.options ={"pageSelect":1}
 				SizeController.query={limit:50,page:1}
 				$scope.listStyle = { height: (window.innerHeight - (200)) + 'px' };
				$scope.BodylistStyle = { height: (window.innerHeight - 250) + 'px' };
				
				window.addEventListener('resize', onResize);
				function onResize() {
					$scope.listStyle.height = (window.innerHeight - 210) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				window.addEventListener('resize', onBodyResize);
				function onBodyResize() {
					$scope.BodylistStyle.height = (window.innerHeight - 250) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
 								
 				BindData()
 				function BindData(){
 					var promise=httpPreConfig({ method: 'GET', url: 'getStaticSizeDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
 					promise.then(function (response) { SizeController.Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) } 
 					}, function(reason){ });
 				}
 				
 				
 				SizeController.ViewData = function(ev,cm){
 					mdDialog.show({
 		                  clickOutsideToClose: true,
 		                  scope:$scope,
 		                  preserveScope: true,    
 		    		      fullscreen: 'md' ,       
 		                  templateUrl: 'viewDetails.html',
 		                  controller: function DialogController($scope, $mdDialog) {
 		                	  $scope.Size=angular.copy(cm);
 		                     $scope.closeDialog = function() { $mdDialog.hide(); }
 		                    
 		                     $scope.editDialog =function(ev,pm){ $mdDialog.hide(); SizeController.EditData(ev,cm) }
 		                  }
 		               });
 				}
 				
 				
 				
 				
 				SizeController.EditData= function(ev,cm){
 					$scope.showTable=false;
 					$scope.btnName="Update";
 					$scope.Size=angular.copy(cm);
 					$scope.SizeForm.$setPristine();
 					$scope.SizeForm.$setUntouched();
 				}
 				
 				SizeController.clearAll = function($event,form){
 					
 					$scope.Size={};
 					SizeController.newItem(form);
 				}
 				
 				SizeController.newItem = function(form){
 					
 					$scope.Size={};
 					$scope.showTable=false;
 					$scope.btnName="Save";
 					form.$setPristine();
 					form.$setUntouched();
 				}
 				
 				SizeController.saveData = function(ev,form){
 					
 					if($scope.btnName == "Save"){
 						
 						if(angular.equals($scope.LastCopied,$scope.Size)){
 							notification.notify("Copied item Not Modified");
 						}
 						else{
 							var promise=httpPreConfig({ method: 'POST', url: 'insertStaticSizeBODetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.Size  });
 							promise.then(function (response) {  
 								$scope.btnName="Update";
 								notification.notify("The entry has been successfully added.");
 								BindData();
 							}, function(reason){ 
 								notification.notify("Save Failed");
 							});

 						}
 					}
 					else{
 						var promise=httpPreConfig({ method: 'POST', url: 'updateStaticSizeBODetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.Size  });
 						promise.then(function (response) {  
 							$scope.btnName="Update";
 							notification.notify("The changes have been updated.");
 							BindData();
 						}, function(reason){ 
 							notification.notify("Update Failed");
 						});
 					}
 					
 					form.$setPristine();
 					form.$setUntouched();
 					$scope.showTable=true;
 				}
 				
 				
 				SizeController.RemoveData = function(ev,cm){
 					var confirm = mdDialog.confirm().title('Are you sure you want to delete?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () {
 					var promise=httpPreConfig({ method: 'POST', url: 'deleteStaticSizeBODetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:cm  });
 					promise.then(function (response) {  
 						notification.notify("The entry has been deleted.");
 						BindData();
 					}, function(reason){ 
 						notification.notify("Delete Failed");
 					});
	        		},function(){});
 				}
 				
 				SizeController.CopyData = function ($event,Data,form){
 					SizeController.newItem(form);
 					$scope.LastCopied=angular.copy(Data);
 					$scope.Size=angular.copy(Data);
 					
 				}
 				
 				SizeController.closeForm = function(ev){
 					$scope.showTable=!$scope.showTable;
 				}
 	        	
 				
 	        }],
 	        controllerAs: 'SizeController',
 	        link: function(scope, element, attrs, controllers) { },
 	        templateUrl : 'Authentication/View/Size.html'
 	    };
 	}); 
   
  ScreenDirectives.directive('noSize', function() {
	  return {
	        restrict : "E",
	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification){
	        	var NoSizeController = this;
	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
	        	$scope.roleBasedRestriction =  window.localStorage.getItem("roleBasedRestriction");
	        	$scope.showTable=true;
				$scope.btnName="Save";
				NoSizeController.options ={"pageSelect":1}
				NoSizeController.query={limit:50,page:1}
				$scope.listStyle = { height: (window.innerHeight - (200)) + 'px' };
				$scope.BodylistStyle = { height: (window.innerHeight - 250) + 'px' };
				
				window.addEventListener('resize', onResize);
				function onResize() {
					$scope.listStyle.height = (window.innerHeight - 210) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				window.addEventListener('resize', onBodyResize);
				function onBodyResize() {
					$scope.BodylistStyle.height = (window.innerHeight - 250) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				BindData()
				function BindData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaticNoSizeDetailsDatabase', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { NoSizeController.Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) } 
					}, function(reason){ });
					BindSizeData();
				}
				
				function BindSizeData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaticSizeDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
 					promise.then(function (response) { NoSizeController.SizeGrid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) } 
 					}, function(reason){ });
				}
				
				NoSizeController.ViewData = function(ev,cm){
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'viewDetails.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	  $scope.NoSize=angular.copy(cm);
		                     $scope.closeDialog = function() { $mdDialog.hide(); }
		                    
		                     $scope.editDialog =function(ev,pm){ $mdDialog.hide(); NoSizeController.EditData(ev,cm) }
		                  }
		               });
				}
				
				
				NoSizeController.EditData= function(ev,cm){
					$scope.showTable=false;
					$scope.btnName="Update";
					$scope.NoSize=angular.copy(cm);
					$scope.NoSizeForm.$setPristine();
					$scope.NoSizeForm.$setUntouched();
				}
				
				NoSizeController.clearAll = function($event,form){
					
					$scope.NoSize={};
					NoSizeController.newItem(form);
				}
				
				NoSizeController.newItem = function(form){
					
					$scope.NoSize={};
					$scope.showTable=false;
					$scope.btnName="Save";
					form.$setPristine();
					form.$setUntouched();
				}
				
				NoSizeController.saveData = function(ev,form){
					
					if($scope.btnName == "Save"){
						
						if(angular.equals($scope.LastCopied,$scope.NoSize)){
							notification.notify("Copied item Not Modified");
						}
						else{
							var promise=httpPreConfig({ method: 'POST', url: 'insertStaticNOSizeBODetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.NoSize  });
							promise.then(function (response) {  
								$scope.btnName="Update";
								notification.notify("The entry has been successfully added.");
								BindData();
							}, function(reason){ 
								notification.notify("Save Failed");
							});

						}
					}
					else{
						var promise=httpPreConfig({ method: 'POST', url: 'updateStaticNOSizeBODetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.NoSize  });
						promise.then(function (response) {  
							$scope.btnName="Update";
							notification.notify("The changes have been updated.");
							BindData();
						}, function(reason){ 
							notification.notify("Update Failed");
						});
					}
					
					form.$setPristine();
					form.$setUntouched();
					$scope.showTable=true;
				}
				
				
				NoSizeController.RemoveData = function(ev,cm){
					
					var confirm = mdDialog.confirm().title('Are you sure you want to delete?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () {
					var promise=httpPreConfig({ method: 'POST', url: 'deleteStaticNOSizeBODetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:cm  });
					promise.then(function (response) {  
						notification.notify("The entry has been deleted.");
						BindData();
					}, function(reason){ 
						notification.notify("Delete Failed");
					});
	        		},function(){});
				}
				
				NoSizeController.CopyData = function ($event,Data,form){
					NoSizeController.newItem(form);
					$scope.LastCopied=angular.copy(Data);
					$scope.NoSize=angular.copy(Data);
					
				}
				
				NoSizeController.closeForm = function(ev){
					$scope.showTable=!$scope.showTable;
				}
	        	
				
	        }],
	        controllerAs: 'NoSizeController',
	        link: function(scope, element, attrs, controllers) { },
	        templateUrl : 'Authentication/View/NoSize.html'
	    };
	}); 
  
  ScreenDirectives.directive('shopifySize', function() {
	  return {
	        restrict : "E",
	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification){
	        	var ShopifySizeController = this;
	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
	        	$scope.roleBasedRestriction =  window.localStorage.getItem("roleBasedRestriction");
	        	$scope.showTable=true;
				$scope.btnName="Save";
				ShopifySizeController.options ={"pageSelect":1}
				ShopifySizeController.query={limit:50,page:1}
				$scope.listStyle = { height: (window.innerHeight - (200)) + 'px' };
				$scope.BodylistStyle = { height: (window.innerHeight - 250) + 'px' };
				
				window.addEventListener('resize', onResize);
				function onResize() {
					$scope.listStyle.height = (window.innerHeight - 210) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				window.addEventListener('resize', onBodyResize);
				function onBodyResize() {
					$scope.BodylistStyle.height = (window.innerHeight - 250) + 'px';
					if($scope.$root != null) { if (!$scope.$root.$$phase) $scope.$digest() };
				}
				
				BindData()
				function BindData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaticShopifySizeDetailsDatabase', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
					promise.then(function (response) { ShopifySizeController.Grid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) } 
					}, function(reason){ });
					BindSizeData()
				}
				
				function BindSizeData(){
					var promise=httpPreConfig({ method: 'GET', url: 'getStaticSizeDetails ', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
 					promise.then(function (response) { ShopifySizeController.SizeGrid_Data ={"count":angular.fromJson(response.data.length),"data":angular.fromJson(response.data) } 
 					}, function(reason){ });
				}
				
				ShopifySizeController.ViewData = function(ev,cm){
					mdDialog.show({
		                  clickOutsideToClose: true,
		                  scope:$scope,
		                  preserveScope: true,    
		    		      fullscreen: 'md' ,       
		                  templateUrl: 'viewDetails.html',
		                  controller: function DialogController($scope, $mdDialog) {
		                	  $scope.ShopifySize=angular.copy(cm);
		                     $scope.closeDialog = function() { $mdDialog.hide(); }
		                    
		                     $scope.editDialog =function(ev,pm){ $mdDialog.hide(); ShopifySizeController.EditData(ev,cm) }
		                  }
		               });
				}
				
				
				ShopifySizeController.EditData= function(ev,cm){
					$scope.showTable=false;
					$scope.btnName="Update";
					$scope.ShopifySize=angular.copy(cm);
					$scope.ShopifySizeForm.$setPristine();
					$scope.ShopifySizeForm.$setUntouched();
				}
				
				ShopifySizeController.clearAll = function($event,form){
					
					$scope.ShopifySize={};
					ShopifySizeController.newItem(form);
				}
				
				ShopifySizeController.newItem = function(form){
					
					$scope.ShopifySize={};
					$scope.showTable=false;
					$scope.btnName="Save";
					form.$setPristine();
					form.$setUntouched();
				}
				
				ShopifySizeController.saveData = function(ev,form){
					
					if($scope.btnName == "Save"){
						
						if(angular.equals($scope.LastCopied,$scope.ShopifySize)){
							notification.notify("Copied item Not Modified");
						}
						else{
							var promise=httpPreConfig({ method: 'POST', url: 'insertStaticShopifySizeBODetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.ShopifySize  });
							promise.then(function (response) {  
								$scope.btnName="Update";
								notification.notify("The entry has been successfully added.");
								BindData();
							}, function(reason){ 
								notification.notify("Save Failed");
							});

						}
					}
					else{
						var promise=httpPreConfig({ method: 'POST', url: 'updateStaticShopifySizeBODetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:$scope.ShopifySize  });
						promise.then(function (response) {  
							$scope.btnName="Update";
							notification.notify("The changes have been updated.");
							BindData();
						}, function(reason){ 
							notification.notify("Update Failed");
						});
					}
					
					form.$setPristine();
					form.$setUntouched();
					$scope.showTable=true;
				}
				
				
				ShopifySizeController.RemoveData = function(ev,cm){
					
					var confirm = mdDialog.confirm().title('Are you sure you want to delete?').targetEvent(ev).ok('Yes').cancel('No');
	        		mdDialog.show(confirm).then(function () {
					var promise=httpPreConfig({ method: 'POST', url: 'deleteStaticShopifySizeBODetails', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data:cm  });
					promise.then(function (response) {  
						notification.notify("The entry has been deleted.");
						BindData();
					}, function(reason){ 
						notification.notify("Delete Failed");
					});
	        		},function(){});
				}
				
				ShopifySizeController.CopyData = function ($event,Data,form){
					ShopifySizeController.newItem(form);
					$scope.LastCopied=angular.copy(Data);
					$scope.ShopifySize=angular.copy(Data);
					
				}
				
				ShopifySizeController.closeForm = function(ev){
					$scope.showTable=!$scope.showTable;
				}
	        	
				
	        }],
	        controllerAs: 'ShopifySizeController',
	        link: function(scope, element, attrs, controllers) { },
	        templateUrl : 'Authentication/View/ShopifySize.html'
	    };
	}); 
  
  
  ScreenDirectives.directive('complexPassword', function() {
	  return {
	    require: 'ngModel',
	    link: function(scope, elm, attrs, ctrl) {
	      ctrl.$parsers.unshift(function(password) {
	        var hasUpperCase = /[A-Z]/.test(password);
	        var hasLowerCase = /[a-z]/.test(password);
	        var hasNumbers = /\d/.test(password);
	        var hasNonalphas = /\W/.test(password);
	        var characterGroupCount = hasUpperCase + hasLowerCase + hasNumbers + hasNonalphas;

	        if ((password.length >= 8) && (characterGroupCount >= 3)) { ctrl.$setValidity('complexity', true); return password; }
	        else { ctrl.$setValidity('complexity', false); return undefined; }

	      });
	    }
	  }
	});
  
  ScreenDirectives.directive('pwCheck', [function () {
	    return {
	      require: 'ngModel',
	      link: function (scope, elem, attrs, ctrl) {
	        var firstPassword = '#' + attrs.pwCheck;
	        elem.add(firstPassword).on('keyup', function () {
	          scope.$apply(function () {
	            var v = elem.val()===$(firstPassword).val();
	            ctrl.$setValidity('pwmatch', v);
	          });
	        });
	      }
	    }
	  }]);
  
  ScreenDirectives.filter('highlight', function($sce) {
	  return function(text, phrase) {
	    if (phrase) text = text.replace(new RegExp('('+phrase+')', 'gi'), '<span class="highlighted">$1</span>')
	    return $sce.trustAsHtml(text)
	  }
   });
  
  ScreenDirectives.directive('numbersOnly', function () {
		return {
			require: 'ngModel',
			link: function (scope, element, attr, ngModelCtrl) {
				function fromUser(text) {
					if (text) {
						var transformedInput = text.toString().replace(/[^0-9.]/g, '');
						if (transformedInput !== text) {
							ngModelCtrl.$setViewValue(transformedInput);
							ngModelCtrl.$render();
						}
						return transformedInput;
					}
					return '';
				}
				ngModelCtrl.$parsers.push(fromUser);
			}
		};
	}); 
  
  ScreenDirectives.directive('meritusFileUploadMizzenMain', ['$parse', '$rootScope', '$filter', function ($parse, $rootScope, $filter) {
		return {
			restrict: 'A',
			link: function (scope, element, attrs) {
				var model = $parse(attrs.fileModel);
				var modelSetter = model.assign;
				element.bind('change', function () {
					scope.$apply(function () {
						$rootScope.MizzenMainFileData = element[0].files[0];
						$rootScope.MizzenMainFileSize = '(' + $filter('number')((element[0].files[0].size / 1024), 0) + ' KB)';
					});
				});
			}
		};
	}]);
  
/*  ScreenDirectives.directive('numberAlignRight',['$parse', '$rootScope', '$filter',function($parse, $rootScope, $filter){
	  
	  return{
		  restrict : 'A',
		  link:function(scope, element, attrs){
			  scope.roleBasedRestriction =  window.localStorage.getItem("roleBasedRestriction");
				 
			  if(element[0].innerText == "create"){
				  
				  if(scope.roleBasedRestriction == 2){
					  
					  element[0].css({'display': 'none','color':'red'});
				  }
			  } 
		  }
	  }
  }])*/
  
  ScreenDirectives.directive('addNewColumn', function() {
 	  return {
 	        restrict : "E",
 	        controller: ['$window', '$state', 'httpPreConfig', '$q', '$mdDialog','$scope','notification', function(window, state, httpPreConfig, Q, mdDialog,$scope,notification){
 	        	var AddnewcolumnController = this;
 	        	var AuthenticationToken = window.localStorage.getItem(tokenName);
 	        
 	        	$scope.NewcolumnNames = [];
 	        	AddnewcolumnController.addNewColumn = function() {
 	        	     var newItemNo = 	 $scope.NewcolumnNames.length+1;
 	        	     if(newItemNo > 10){
 	        	    	notification.notify('Limit Exceed' )
 	        	     }
 	        	     else{
 	        	    	$scope.NewcolumnNames.push({'pkID' : null, 'columnName' : ""});
 	        	    	 $scope.disableadd = true;
 	        	     }
 	        	    
 	        	   };
 	        	   
 	        	 
 	        	  
 	        	  
 	        	  
 	        	  bind();
 	        	  function bind(){
 	        		 var promise=httpPreConfig({ method: 'GET', url: 'displayUserDefinedFields', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken } });
 					promise.then(function(response){
 						if(response.data.length == 0){
 							 $scope.NewcolumnNames = [{'pkID':null,'columnName':""}];
 							 $scope.disabledsave = true;
 							 $scope.disableadd = true;
 						}
 						else{
 							$scope.NewcolumnNames = (response.data);
 							$scope.backbuttonedit = false;
 						}
 						
 						
 					},function(){});
 	        	  }
 	        	   
 	        	  $scope.enablesave = function(data){
 	        		  if($scope.NewcolumnNames[0].columnName == "" || $scope.NewcolumnNames[0].columnName == undefined){
 	        			 $scope.disabledsave = true;
 	        			 
 	        		  }
 	        		  else{
 	        			 $scope.disabledsave = false;
 	        			 $scope.backbuttonedit = true;
 	        			
 	        		  }
 	        		  if(data.columnName == ""){
 	        			  $scope.disableadd = true;
 	        		  }
 	        		  else{
 	        			  $scope.disableadd = false;
 	        		  }
 	        		
 	        	  }
 	        	  
 	        	   $scope.deletecolumn = function(data){
 	        		   if(data.pkID != null){
 	        			  var confirm = mdDialog.confirm().title('Are you sure you want to delete column?').targetEvent().ok('Yes').cancel('No');
	    	           		mdDialog.show(confirm).then(function () { 
	    	           			var promise = httpPreConfig({ method: 'POST', url: 'deleteUserDefinedFields', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken },'data':data }),
	    	           			deferObject = deferObject || Q.defer();
	    	               		promise.then(function (response) { 
	    	       				if(response.status == 200){ bind(); notification.notify('Column(s) have been deleted successfully.' ); 
	    	       	        	 }
	    	               		}, function(reason){  }); 
	    	           		}, function () { });
 	        		   }
 	        		   else{
 	        			 
 	 	        			  $scope.NewcolumnNames.pop(data);
 	 	        			 $scope.disableadd = false;
 	 	        			 if($scope.NewcolumnNames.length == 0){
 	 	 	        			 $scope.disabledsave = true;
 	 	 	        			
 	 	 	        		  }
 	 	 	        		  else{
 	 	 	        			 $scope.disabledsave = false;
 	 	 	        			
 	 	 	        		  }
 	 	        		   
 	 	        		    
 	        		   }
 	        		   
 	        		
 	           		
 	        	   }
 	        	   
 	        	   $scope.backToItemMaster = function(){
 	        		   if($scope.NewcolumnNames.length > 0){
 	        			  if((($scope.NewcolumnNames[$scope.NewcolumnNames.length-1]).pkID == null && ($scope.NewcolumnNames[$scope.NewcolumnNames.length-1]).columnName != "")) {
 	 	        			  var confirm = mdDialog.confirm().title('Changes have not been saved.').textContent('Are you sure you want to go back ?').targetEvent().ok('Yes').cancel('No');
 	  	 	        		 mdDialog.show(confirm).then(function () { 
 	  	 	        			state.go('landingScreen.productMaster');
 	  	  	               		
 	  	  	           		}, function () { });
 	 	        		   }
 	 	        		   else if($scope.backbuttonedit == true){
 	 	        			 var confirm = mdDialog.confirm().title('Changes have not been saved.').textContent('Are you sure you want to go back ?').targetEvent().ok('Yes').cancel('No');
 	  	 	        		 mdDialog.show(confirm).then(function () { 
 	  	 	        			state.go('landingScreen.productMaster');
 	  	  	               		
 	  	  	           		}, function () { });
 	 	        		   }
 	 	        		   else{
 	 	        			 state.go('landingScreen.productMaster');
 	 	        		   }
 	 	        	
 	        		   }
 	        		   else{
 	        			  state.go('landingScreen.productMaster');
 	        		   }
 	        		   
 	        		   
 	        	   }
 	        	   
 	        	  $scope.savenewcolumn = function(){
 	        		
 	 	        	 var count = 0,i,columnlength=$scope.NewcolumnNames.length;
 	 	        	 
 	 	        	 for(i=0;i<columnlength;i++){
 	 	        		 if($scope.NewcolumnNames[i].columnName == ""){
 	 	        			 count++;
 	 	        		 }
 	 	        	 }
 	 	        	 if(count != 0){
 	 	        		notification.notify('Column name should not be blank.');
 	 	        	 }
 	 	        	 else{
 	 	        		 var promise=httpPreConfig({ method: 'POST', url: 'updateUserDefinedFields', headers: { 'Content-Type': 'application/json', 'token': AuthenticationToken }, data: $scope.NewcolumnNames  });
 	 	 	        	promise.then(function(response){bind(); notification.notify('Column(s) have been updated successfully.' );},function(response){alert("error")});
 	 	        	 }
 	 	        	
 	        	  }
 	        }],
 	        controllerAs: 'AddnewcolumnController',
 	        link: function(scope, element, attrs, controllers) { },
 	        templateUrl : 'Authentication/View/NewColumnScreen.html'
 	    };
 	}); 
  
})();
